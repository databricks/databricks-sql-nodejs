//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.TProtocolVersion = {
  '-7' : '__HIVE_JDBC_WORKAROUND',
  '__HIVE_JDBC_WORKAROUND' : -7,
  '65281' : '__TEST_PROTOCOL_VERSION',
  '__TEST_PROTOCOL_VERSION' : 65281,
  '0' : 'HIVE_CLI_SERVICE_PROTOCOL_V1',
  'HIVE_CLI_SERVICE_PROTOCOL_V1' : 0,
  '1' : 'HIVE_CLI_SERVICE_PROTOCOL_V2',
  'HIVE_CLI_SERVICE_PROTOCOL_V2' : 1,
  '2' : 'HIVE_CLI_SERVICE_PROTOCOL_V3',
  'HIVE_CLI_SERVICE_PROTOCOL_V3' : 2,
  '3' : 'HIVE_CLI_SERVICE_PROTOCOL_V4',
  'HIVE_CLI_SERVICE_PROTOCOL_V4' : 3,
  '4' : 'HIVE_CLI_SERVICE_PROTOCOL_V5',
  'HIVE_CLI_SERVICE_PROTOCOL_V5' : 4,
  '5' : 'HIVE_CLI_SERVICE_PROTOCOL_V6',
  'HIVE_CLI_SERVICE_PROTOCOL_V6' : 5,
  '6' : 'HIVE_CLI_SERVICE_PROTOCOL_V7',
  'HIVE_CLI_SERVICE_PROTOCOL_V7' : 6,
  '7' : 'HIVE_CLI_SERVICE_PROTOCOL_V8',
  'HIVE_CLI_SERVICE_PROTOCOL_V8' : 7,
  '8' : 'HIVE_CLI_SERVICE_PROTOCOL_V9',
  'HIVE_CLI_SERVICE_PROTOCOL_V9' : 8,
  '9' : 'HIVE_CLI_SERVICE_PROTOCOL_V10',
  'HIVE_CLI_SERVICE_PROTOCOL_V10' : 9,
  '42241' : 'SPARK_CLI_SERVICE_PROTOCOL_V1',
  'SPARK_CLI_SERVICE_PROTOCOL_V1' : 42241,
  '42242' : 'SPARK_CLI_SERVICE_PROTOCOL_V2',
  'SPARK_CLI_SERVICE_PROTOCOL_V2' : 42242,
  '42243' : 'SPARK_CLI_SERVICE_PROTOCOL_V3',
  'SPARK_CLI_SERVICE_PROTOCOL_V3' : 42243,
  '42244' : 'SPARK_CLI_SERVICE_PROTOCOL_V4',
  'SPARK_CLI_SERVICE_PROTOCOL_V4' : 42244,
  '42245' : 'SPARK_CLI_SERVICE_PROTOCOL_V5',
  'SPARK_CLI_SERVICE_PROTOCOL_V5' : 42245,
  '42246' : 'SPARK_CLI_SERVICE_PROTOCOL_V6',
  'SPARK_CLI_SERVICE_PROTOCOL_V6' : 42246,
  '42247' : 'SPARK_CLI_SERVICE_PROTOCOL_V7',
  'SPARK_CLI_SERVICE_PROTOCOL_V7' : 42247,
  '42248' : 'SPARK_CLI_SERVICE_PROTOCOL_V8',
  'SPARK_CLI_SERVICE_PROTOCOL_V8' : 42248,
  '42249' : 'SPARK_CLI_SERVICE_PROTOCOL_V9',
  'SPARK_CLI_SERVICE_PROTOCOL_V9' : 42249
};
ttypes.TTypeId = {
  '0' : 'BOOLEAN_TYPE',
  'BOOLEAN_TYPE' : 0,
  '1' : 'TINYINT_TYPE',
  'TINYINT_TYPE' : 1,
  '2' : 'SMALLINT_TYPE',
  'SMALLINT_TYPE' : 2,
  '3' : 'INT_TYPE',
  'INT_TYPE' : 3,
  '4' : 'BIGINT_TYPE',
  'BIGINT_TYPE' : 4,
  '5' : 'FLOAT_TYPE',
  'FLOAT_TYPE' : 5,
  '6' : 'DOUBLE_TYPE',
  'DOUBLE_TYPE' : 6,
  '7' : 'STRING_TYPE',
  'STRING_TYPE' : 7,
  '8' : 'TIMESTAMP_TYPE',
  'TIMESTAMP_TYPE' : 8,
  '9' : 'BINARY_TYPE',
  'BINARY_TYPE' : 9,
  '10' : 'ARRAY_TYPE',
  'ARRAY_TYPE' : 10,
  '11' : 'MAP_TYPE',
  'MAP_TYPE' : 11,
  '12' : 'STRUCT_TYPE',
  'STRUCT_TYPE' : 12,
  '13' : 'UNION_TYPE',
  'UNION_TYPE' : 13,
  '14' : 'USER_DEFINED_TYPE',
  'USER_DEFINED_TYPE' : 14,
  '15' : 'DECIMAL_TYPE',
  'DECIMAL_TYPE' : 15,
  '16' : 'NULL_TYPE',
  'NULL_TYPE' : 16,
  '17' : 'DATE_TYPE',
  'DATE_TYPE' : 17,
  '18' : 'VARCHAR_TYPE',
  'VARCHAR_TYPE' : 18,
  '19' : 'CHAR_TYPE',
  'CHAR_TYPE' : 19,
  '20' : 'INTERVAL_YEAR_MONTH_TYPE',
  'INTERVAL_YEAR_MONTH_TYPE' : 20,
  '21' : 'INTERVAL_DAY_TIME_TYPE',
  'INTERVAL_DAY_TIME_TYPE' : 21
};
ttypes.TSparkRowSetType = {
  '0' : 'ARROW_BASED_SET',
  'ARROW_BASED_SET' : 0,
  '1' : 'COLUMN_BASED_SET',
  'COLUMN_BASED_SET' : 1,
  '2' : 'ROW_BASED_SET',
  'ROW_BASED_SET' : 2,
  '3' : 'URL_BASED_SET',
  'URL_BASED_SET' : 3
};
ttypes.TDBSqlCompressionCodec = {
  '0' : 'NONE',
  'NONE' : 0,
  '1' : 'LZ4_FRAME',
  'LZ4_FRAME' : 1,
  '2' : 'LZ4_BLOCK',
  'LZ4_BLOCK' : 2
};
ttypes.TDBSqlArrowLayout = {
  '0' : 'ARROW_BATCH',
  'ARROW_BATCH' : 0,
  '1' : 'ARROW_STREAMING',
  'ARROW_STREAMING' : 1
};
ttypes.TStatusCode = {
  '0' : 'SUCCESS_STATUS',
  'SUCCESS_STATUS' : 0,
  '1' : 'SUCCESS_WITH_INFO_STATUS',
  'SUCCESS_WITH_INFO_STATUS' : 1,
  '2' : 'STILL_EXECUTING_STATUS',
  'STILL_EXECUTING_STATUS' : 2,
  '3' : 'ERROR_STATUS',
  'ERROR_STATUS' : 3,
  '4' : 'INVALID_HANDLE_STATUS',
  'INVALID_HANDLE_STATUS' : 4
};
ttypes.TOperationState = {
  '0' : 'INITIALIZED_STATE',
  'INITIALIZED_STATE' : 0,
  '1' : 'RUNNING_STATE',
  'RUNNING_STATE' : 1,
  '2' : 'FINISHED_STATE',
  'FINISHED_STATE' : 2,
  '3' : 'CANCELED_STATE',
  'CANCELED_STATE' : 3,
  '4' : 'CLOSED_STATE',
  'CLOSED_STATE' : 4,
  '5' : 'ERROR_STATE',
  'ERROR_STATE' : 5,
  '6' : 'UKNOWN_STATE',
  'UKNOWN_STATE' : 6,
  '7' : 'PENDING_STATE',
  'PENDING_STATE' : 7,
  '8' : 'TIMEDOUT_STATE',
  'TIMEDOUT_STATE' : 8
};
ttypes.TOperationType = {
  '0' : 'EXECUTE_STATEMENT',
  'EXECUTE_STATEMENT' : 0,
  '1' : 'GET_TYPE_INFO',
  'GET_TYPE_INFO' : 1,
  '2' : 'GET_CATALOGS',
  'GET_CATALOGS' : 2,
  '3' : 'GET_SCHEMAS',
  'GET_SCHEMAS' : 3,
  '4' : 'GET_TABLES',
  'GET_TABLES' : 4,
  '5' : 'GET_TABLE_TYPES',
  'GET_TABLE_TYPES' : 5,
  '6' : 'GET_COLUMNS',
  'GET_COLUMNS' : 6,
  '7' : 'GET_FUNCTIONS',
  'GET_FUNCTIONS' : 7,
  '8' : 'UNKNOWN',
  'UNKNOWN' : 8
};
ttypes.TGetInfoType = {
  '0' : 'CLI_MAX_DRIVER_CONNECTIONS',
  'CLI_MAX_DRIVER_CONNECTIONS' : 0,
  '1' : 'CLI_MAX_CONCURRENT_ACTIVITIES',
  'CLI_MAX_CONCURRENT_ACTIVITIES' : 1,
  '2' : 'CLI_DATA_SOURCE_NAME',
  'CLI_DATA_SOURCE_NAME' : 2,
  '8' : 'CLI_FETCH_DIRECTION',
  'CLI_FETCH_DIRECTION' : 8,
  '13' : 'CLI_SERVER_NAME',
  'CLI_SERVER_NAME' : 13,
  '14' : 'CLI_SEARCH_PATTERN_ESCAPE',
  'CLI_SEARCH_PATTERN_ESCAPE' : 14,
  '17' : 'CLI_DBMS_NAME',
  'CLI_DBMS_NAME' : 17,
  '18' : 'CLI_DBMS_VER',
  'CLI_DBMS_VER' : 18,
  '19' : 'CLI_ACCESSIBLE_TABLES',
  'CLI_ACCESSIBLE_TABLES' : 19,
  '20' : 'CLI_ACCESSIBLE_PROCEDURES',
  'CLI_ACCESSIBLE_PROCEDURES' : 20,
  '23' : 'CLI_CURSOR_COMMIT_BEHAVIOR',
  'CLI_CURSOR_COMMIT_BEHAVIOR' : 23,
  '25' : 'CLI_DATA_SOURCE_READ_ONLY',
  'CLI_DATA_SOURCE_READ_ONLY' : 25,
  '26' : 'CLI_DEFAULT_TXN_ISOLATION',
  'CLI_DEFAULT_TXN_ISOLATION' : 26,
  '28' : 'CLI_IDENTIFIER_CASE',
  'CLI_IDENTIFIER_CASE' : 28,
  '29' : 'CLI_IDENTIFIER_QUOTE_CHAR',
  'CLI_IDENTIFIER_QUOTE_CHAR' : 29,
  '30' : 'CLI_MAX_COLUMN_NAME_LEN',
  'CLI_MAX_COLUMN_NAME_LEN' : 30,
  '31' : 'CLI_MAX_CURSOR_NAME_LEN',
  'CLI_MAX_CURSOR_NAME_LEN' : 31,
  '32' : 'CLI_MAX_SCHEMA_NAME_LEN',
  'CLI_MAX_SCHEMA_NAME_LEN' : 32,
  '34' : 'CLI_MAX_CATALOG_NAME_LEN',
  'CLI_MAX_CATALOG_NAME_LEN' : 34,
  '35' : 'CLI_MAX_TABLE_NAME_LEN',
  'CLI_MAX_TABLE_NAME_LEN' : 35,
  '43' : 'CLI_SCROLL_CONCURRENCY',
  'CLI_SCROLL_CONCURRENCY' : 43,
  '46' : 'CLI_TXN_CAPABLE',
  'CLI_TXN_CAPABLE' : 46,
  '47' : 'CLI_USER_NAME',
  'CLI_USER_NAME' : 47,
  '72' : 'CLI_TXN_ISOLATION_OPTION',
  'CLI_TXN_ISOLATION_OPTION' : 72,
  '73' : 'CLI_INTEGRITY',
  'CLI_INTEGRITY' : 73,
  '81' : 'CLI_GETDATA_EXTENSIONS',
  'CLI_GETDATA_EXTENSIONS' : 81,
  '85' : 'CLI_NULL_COLLATION',
  'CLI_NULL_COLLATION' : 85,
  '86' : 'CLI_ALTER_TABLE',
  'CLI_ALTER_TABLE' : 86,
  '90' : 'CLI_ORDER_BY_COLUMNS_IN_SELECT',
  'CLI_ORDER_BY_COLUMNS_IN_SELECT' : 90,
  '94' : 'CLI_SPECIAL_CHARACTERS',
  'CLI_SPECIAL_CHARACTERS' : 94,
  '97' : 'CLI_MAX_COLUMNS_IN_GROUP_BY',
  'CLI_MAX_COLUMNS_IN_GROUP_BY' : 97,
  '98' : 'CLI_MAX_COLUMNS_IN_INDEX',
  'CLI_MAX_COLUMNS_IN_INDEX' : 98,
  '99' : 'CLI_MAX_COLUMNS_IN_ORDER_BY',
  'CLI_MAX_COLUMNS_IN_ORDER_BY' : 99,
  '100' : 'CLI_MAX_COLUMNS_IN_SELECT',
  'CLI_MAX_COLUMNS_IN_SELECT' : 100,
  '101' : 'CLI_MAX_COLUMNS_IN_TABLE',
  'CLI_MAX_COLUMNS_IN_TABLE' : 101,
  '102' : 'CLI_MAX_INDEX_SIZE',
  'CLI_MAX_INDEX_SIZE' : 102,
  '104' : 'CLI_MAX_ROW_SIZE',
  'CLI_MAX_ROW_SIZE' : 104,
  '105' : 'CLI_MAX_STATEMENT_LEN',
  'CLI_MAX_STATEMENT_LEN' : 105,
  '106' : 'CLI_MAX_TABLES_IN_SELECT',
  'CLI_MAX_TABLES_IN_SELECT' : 106,
  '107' : 'CLI_MAX_USER_NAME_LEN',
  'CLI_MAX_USER_NAME_LEN' : 107,
  '115' : 'CLI_OJ_CAPABILITIES',
  'CLI_OJ_CAPABILITIES' : 115,
  '10000' : 'CLI_XOPEN_CLI_YEAR',
  'CLI_XOPEN_CLI_YEAR' : 10000,
  '10001' : 'CLI_CURSOR_SENSITIVITY',
  'CLI_CURSOR_SENSITIVITY' : 10001,
  '10002' : 'CLI_DESCRIBE_PARAMETER',
  'CLI_DESCRIBE_PARAMETER' : 10002,
  '10003' : 'CLI_CATALOG_NAME',
  'CLI_CATALOG_NAME' : 10003,
  '10004' : 'CLI_COLLATION_SEQ',
  'CLI_COLLATION_SEQ' : 10004,
  '10005' : 'CLI_MAX_IDENTIFIER_LEN',
  'CLI_MAX_IDENTIFIER_LEN' : 10005
};
ttypes.TCacheLookupResult = {
  '0' : 'CACHE_INELIGIBLE',
  'CACHE_INELIGIBLE' : 0,
  '1' : 'LOCAL_CACHE_HIT',
  'LOCAL_CACHE_HIT' : 1,
  '2' : 'REMOTE_CACHE_HIT',
  'REMOTE_CACHE_HIT' : 2,
  '3' : 'CACHE_MISS',
  'CACHE_MISS' : 3
};
ttypes.TFetchOrientation = {
  '0' : 'FETCH_NEXT',
  'FETCH_NEXT' : 0,
  '1' : 'FETCH_PRIOR',
  'FETCH_PRIOR' : 1,
  '2' : 'FETCH_RELATIVE',
  'FETCH_RELATIVE' : 2,
  '3' : 'FETCH_ABSOLUTE',
  'FETCH_ABSOLUTE' : 3,
  '4' : 'FETCH_FIRST',
  'FETCH_FIRST' : 4,
  '5' : 'FETCH_LAST',
  'FETCH_LAST' : 5
};
ttypes.TJobExecutionStatus = {
  '0' : 'IN_PROGRESS',
  'IN_PROGRESS' : 0,
  '1' : 'COMPLETE',
  'COMPLETE' : 1,
  '2' : 'NOT_AVAILABLE',
  'NOT_AVAILABLE' : 2
};
var TTypeQualifierValue = module.exports.TTypeQualifierValue = function(args) {
  this.i32Value = null;
  this.stringValue = null;
  if (args) {
    if (args.i32Value !== undefined && args.i32Value !== null) {
      this.i32Value = args.i32Value;
    }
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
  }
};
TTypeQualifierValue.prototype = {};
TTypeQualifierValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.i32Value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTypeQualifierValue.prototype.write = function(output) {
  output.writeStructBegin('TTypeQualifierValue');
  if (this.i32Value !== null && this.i32Value !== undefined) {
    output.writeFieldBegin('i32Value', Thrift.Type.I32, 1);
    output.writeI32(this.i32Value);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 2);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TTypeQualifiers = module.exports.TTypeQualifiers = function(args) {
  this.qualifiers = null;
  if (args) {
    if (args.qualifiers !== undefined && args.qualifiers !== null) {
      this.qualifiers = Thrift.copyMap(args.qualifiers, [ttypes.TTypeQualifierValue]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualifiers is unset!');
    }
  }
};
TTypeQualifiers.prototype = {};
TTypeQualifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.qualifiers = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readString();
          val4 = new ttypes.TTypeQualifierValue();
          val4.read(input);
          this.qualifiers[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTypeQualifiers.prototype.write = function(output) {
  output.writeStructBegin('TTypeQualifiers');
  if (this.qualifiers !== null && this.qualifiers !== undefined) {
    output.writeFieldBegin('qualifiers', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.qualifiers));
    for (var kiter5 in this.qualifiers) {
      if (this.qualifiers.hasOwnProperty(kiter5)) {
        var viter6 = this.qualifiers[kiter5];
        output.writeString(kiter5);
        viter6.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPrimitiveTypeEntry = module.exports.TPrimitiveTypeEntry = function(args) {
  this.type = null;
  this.typeQualifiers = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.typeQualifiers !== undefined && args.typeQualifiers !== null) {
      this.typeQualifiers = new ttypes.TTypeQualifiers(args.typeQualifiers);
    }
  }
};
TPrimitiveTypeEntry.prototype = {};
TPrimitiveTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.typeQualifiers = new ttypes.TTypeQualifiers();
        this.typeQualifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPrimitiveTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TPrimitiveTypeEntry');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.typeQualifiers !== null && this.typeQualifiers !== undefined) {
    output.writeFieldBegin('typeQualifiers', Thrift.Type.STRUCT, 2);
    this.typeQualifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TArrayTypeEntry = module.exports.TArrayTypeEntry = function(args) {
  this.objectTypePtr = null;
  if (args) {
    if (args.objectTypePtr !== undefined && args.objectTypePtr !== null) {
      this.objectTypePtr = args.objectTypePtr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field objectTypePtr is unset!');
    }
  }
};
TArrayTypeEntry.prototype = {};
TArrayTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.objectTypePtr = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TArrayTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TArrayTypeEntry');
  if (this.objectTypePtr !== null && this.objectTypePtr !== undefined) {
    output.writeFieldBegin('objectTypePtr', Thrift.Type.I32, 1);
    output.writeI32(this.objectTypePtr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMapTypeEntry = module.exports.TMapTypeEntry = function(args) {
  this.keyTypePtr = null;
  this.valueTypePtr = null;
  if (args) {
    if (args.keyTypePtr !== undefined && args.keyTypePtr !== null) {
      this.keyTypePtr = args.keyTypePtr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field keyTypePtr is unset!');
    }
    if (args.valueTypePtr !== undefined && args.valueTypePtr !== null) {
      this.valueTypePtr = args.valueTypePtr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valueTypePtr is unset!');
    }
  }
};
TMapTypeEntry.prototype = {};
TMapTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.keyTypePtr = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.valueTypePtr = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMapTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TMapTypeEntry');
  if (this.keyTypePtr !== null && this.keyTypePtr !== undefined) {
    output.writeFieldBegin('keyTypePtr', Thrift.Type.I32, 1);
    output.writeI32(this.keyTypePtr);
    output.writeFieldEnd();
  }
  if (this.valueTypePtr !== null && this.valueTypePtr !== undefined) {
    output.writeFieldBegin('valueTypePtr', Thrift.Type.I32, 2);
    output.writeI32(this.valueTypePtr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TStructTypeEntry = module.exports.TStructTypeEntry = function(args) {
  this.nameToTypePtr = null;
  if (args) {
    if (args.nameToTypePtr !== undefined && args.nameToTypePtr !== null) {
      this.nameToTypePtr = Thrift.copyMap(args.nameToTypePtr, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nameToTypePtr is unset!');
    }
  }
};
TStructTypeEntry.prototype = {};
TStructTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.nameToTypePtr = {};
        var _rtmp38 = input.readMapBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          var key10 = null;
          var val11 = null;
          key10 = input.readString();
          val11 = input.readI32();
          this.nameToTypePtr[key10] = val11;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStructTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TStructTypeEntry');
  if (this.nameToTypePtr !== null && this.nameToTypePtr !== undefined) {
    output.writeFieldBegin('nameToTypePtr', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.nameToTypePtr));
    for (var kiter12 in this.nameToTypePtr) {
      if (this.nameToTypePtr.hasOwnProperty(kiter12)) {
        var viter13 = this.nameToTypePtr[kiter12];
        output.writeString(kiter12);
        output.writeI32(viter13);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TUnionTypeEntry = module.exports.TUnionTypeEntry = function(args) {
  this.nameToTypePtr = null;
  if (args) {
    if (args.nameToTypePtr !== undefined && args.nameToTypePtr !== null) {
      this.nameToTypePtr = Thrift.copyMap(args.nameToTypePtr, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nameToTypePtr is unset!');
    }
  }
};
TUnionTypeEntry.prototype = {};
TUnionTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.nameToTypePtr = {};
        var _rtmp315 = input.readMapBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var key17 = null;
          var val18 = null;
          key17 = input.readString();
          val18 = input.readI32();
          this.nameToTypePtr[key17] = val18;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUnionTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TUnionTypeEntry');
  if (this.nameToTypePtr !== null && this.nameToTypePtr !== undefined) {
    output.writeFieldBegin('nameToTypePtr', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.nameToTypePtr));
    for (var kiter19 in this.nameToTypePtr) {
      if (this.nameToTypePtr.hasOwnProperty(kiter19)) {
        var viter20 = this.nameToTypePtr[kiter19];
        output.writeString(kiter19);
        output.writeI32(viter20);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TUserDefinedTypeEntry = module.exports.TUserDefinedTypeEntry = function(args) {
  this.typeClassName = null;
  if (args) {
    if (args.typeClassName !== undefined && args.typeClassName !== null) {
      this.typeClassName = args.typeClassName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeClassName is unset!');
    }
  }
};
TUserDefinedTypeEntry.prototype = {};
TUserDefinedTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.typeClassName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUserDefinedTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TUserDefinedTypeEntry');
  if (this.typeClassName !== null && this.typeClassName !== undefined) {
    output.writeFieldBegin('typeClassName', Thrift.Type.STRING, 1);
    output.writeString(this.typeClassName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TTypeEntry = module.exports.TTypeEntry = function(args) {
  this.primitiveEntry = null;
  this.arrayEntry = null;
  this.mapEntry = null;
  this.structEntry = null;
  this.unionEntry = null;
  this.userDefinedTypeEntry = null;
  if (args) {
    if (args.primitiveEntry !== undefined && args.primitiveEntry !== null) {
      this.primitiveEntry = new ttypes.TPrimitiveTypeEntry(args.primitiveEntry);
    }
    if (args.arrayEntry !== undefined && args.arrayEntry !== null) {
      this.arrayEntry = new ttypes.TArrayTypeEntry(args.arrayEntry);
    }
    if (args.mapEntry !== undefined && args.mapEntry !== null) {
      this.mapEntry = new ttypes.TMapTypeEntry(args.mapEntry);
    }
    if (args.structEntry !== undefined && args.structEntry !== null) {
      this.structEntry = new ttypes.TStructTypeEntry(args.structEntry);
    }
    if (args.unionEntry !== undefined && args.unionEntry !== null) {
      this.unionEntry = new ttypes.TUnionTypeEntry(args.unionEntry);
    }
    if (args.userDefinedTypeEntry !== undefined && args.userDefinedTypeEntry !== null) {
      this.userDefinedTypeEntry = new ttypes.TUserDefinedTypeEntry(args.userDefinedTypeEntry);
    }
  }
};
TTypeEntry.prototype = {};
TTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.primitiveEntry = new ttypes.TPrimitiveTypeEntry();
        this.primitiveEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.arrayEntry = new ttypes.TArrayTypeEntry();
        this.arrayEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapEntry = new ttypes.TMapTypeEntry();
        this.mapEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.structEntry = new ttypes.TStructTypeEntry();
        this.structEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.unionEntry = new ttypes.TUnionTypeEntry();
        this.unionEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.userDefinedTypeEntry = new ttypes.TUserDefinedTypeEntry();
        this.userDefinedTypeEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TTypeEntry');
  if (this.primitiveEntry !== null && this.primitiveEntry !== undefined) {
    output.writeFieldBegin('primitiveEntry', Thrift.Type.STRUCT, 1);
    this.primitiveEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.arrayEntry !== null && this.arrayEntry !== undefined) {
    output.writeFieldBegin('arrayEntry', Thrift.Type.STRUCT, 2);
    this.arrayEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.mapEntry !== null && this.mapEntry !== undefined) {
    output.writeFieldBegin('mapEntry', Thrift.Type.STRUCT, 3);
    this.mapEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.structEntry !== null && this.structEntry !== undefined) {
    output.writeFieldBegin('structEntry', Thrift.Type.STRUCT, 4);
    this.structEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.unionEntry !== null && this.unionEntry !== undefined) {
    output.writeFieldBegin('unionEntry', Thrift.Type.STRUCT, 5);
    this.unionEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.userDefinedTypeEntry !== null && this.userDefinedTypeEntry !== undefined) {
    output.writeFieldBegin('userDefinedTypeEntry', Thrift.Type.STRUCT, 6);
    this.userDefinedTypeEntry.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TTypeDesc = module.exports.TTypeDesc = function(args) {
  this.types = null;
  if (args) {
    if (args.types !== undefined && args.types !== null) {
      this.types = Thrift.copyList(args.types, [ttypes.TTypeEntry]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field types is unset!');
    }
  }
};
TTypeDesc.prototype = {};
TTypeDesc.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.types = [];
        var _rtmp322 = input.readListBegin();
        var _size21 = _rtmp322.size || 0;
        for (var _i23 = 0; _i23 < _size21; ++_i23) {
          var elem24 = null;
          elem24 = new ttypes.TTypeEntry();
          elem24.read(input);
          this.types.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTypeDesc.prototype.write = function(output) {
  output.writeStructBegin('TTypeDesc');
  if (this.types !== null && this.types !== undefined) {
    output.writeFieldBegin('types', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.types.length);
    for (var iter25 in this.types) {
      if (this.types.hasOwnProperty(iter25)) {
        iter25 = this.types[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TColumnDesc = module.exports.TColumnDesc = function(args) {
  this.columnName = null;
  this.typeDesc = null;
  this.position = null;
  this.comment = null;
  if (args) {
    if (args.columnName !== undefined && args.columnName !== null) {
      this.columnName = args.columnName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field columnName is unset!');
    }
    if (args.typeDesc !== undefined && args.typeDesc !== null) {
      this.typeDesc = new ttypes.TTypeDesc(args.typeDesc);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeDesc is unset!');
    }
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field position is unset!');
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
TColumnDesc.prototype = {};
TColumnDesc.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.typeDesc = new ttypes.TTypeDesc();
        this.typeDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnDesc.prototype.write = function(output) {
  output.writeStructBegin('TColumnDesc');
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 1);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.typeDesc !== null && this.typeDesc !== undefined) {
    output.writeFieldBegin('typeDesc', Thrift.Type.STRUCT, 2);
    this.typeDesc.write(output);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 3);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TTableSchema = module.exports.TTableSchema = function(args) {
  this.columns = null;
  if (args) {
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.TColumnDesc]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field columns is unset!');
    }
  }
};
TTableSchema.prototype = {};
TTableSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp327 = input.readListBegin();
        var _size26 = _rtmp327.size || 0;
        for (var _i28 = 0; _i28 < _size26; ++_i28) {
          var elem29 = null;
          elem29 = new ttypes.TColumnDesc();
          elem29.read(input);
          this.columns.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTableSchema.prototype.write = function(output) {
  output.writeStructBegin('TTableSchema');
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter30 in this.columns) {
      if (this.columns.hasOwnProperty(iter30)) {
        iter30 = this.columns[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TBoolValue = module.exports.TBoolValue = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TBoolValue.prototype = {};
TBoolValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.value = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBoolValue.prototype.write = function(output) {
  output.writeStructBegin('TBoolValue');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BOOL, 1);
    output.writeBool(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TByteValue = module.exports.TByteValue = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TByteValue.prototype = {};
TByteValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.value = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TByteValue.prototype.write = function(output) {
  output.writeStructBegin('TByteValue');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BYTE, 1);
    output.writeByte(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TI16Value = module.exports.TI16Value = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TI16Value.prototype = {};
TI16Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.value = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI16Value.prototype.write = function(output) {
  output.writeStructBegin('TI16Value');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I16, 1);
    output.writeI16(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TI32Value = module.exports.TI32Value = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TI32Value.prototype = {};
TI32Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI32Value.prototype.write = function(output) {
  output.writeStructBegin('TI32Value');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 1);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TI64Value = module.exports.TI64Value = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TI64Value.prototype = {};
TI64Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI64Value.prototype.write = function(output) {
  output.writeStructBegin('TI64Value');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I64, 1);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TDoubleValue = module.exports.TDoubleValue = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TDoubleValue.prototype = {};
TDoubleValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDoubleValue.prototype.write = function(output) {
  output.writeStructBegin('TDoubleValue');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TStringValue = module.exports.TStringValue = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TStringValue.prototype = {};
TStringValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringValue.prototype.write = function(output) {
  output.writeStructBegin('TStringValue');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TColumnValue = module.exports.TColumnValue = function(args) {
  this.boolVal = null;
  this.byteVal = null;
  this.i16Val = null;
  this.i32Val = null;
  this.i64Val = null;
  this.doubleVal = null;
  this.stringVal = null;
  if (args) {
    if (args.boolVal !== undefined && args.boolVal !== null) {
      this.boolVal = new ttypes.TBoolValue(args.boolVal);
    }
    if (args.byteVal !== undefined && args.byteVal !== null) {
      this.byteVal = new ttypes.TByteValue(args.byteVal);
    }
    if (args.i16Val !== undefined && args.i16Val !== null) {
      this.i16Val = new ttypes.TI16Value(args.i16Val);
    }
    if (args.i32Val !== undefined && args.i32Val !== null) {
      this.i32Val = new ttypes.TI32Value(args.i32Val);
    }
    if (args.i64Val !== undefined && args.i64Val !== null) {
      this.i64Val = new ttypes.TI64Value(args.i64Val);
    }
    if (args.doubleVal !== undefined && args.doubleVal !== null) {
      this.doubleVal = new ttypes.TDoubleValue(args.doubleVal);
    }
    if (args.stringVal !== undefined && args.stringVal !== null) {
      this.stringVal = new ttypes.TStringValue(args.stringVal);
    }
  }
};
TColumnValue.prototype = {};
TColumnValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.boolVal = new ttypes.TBoolValue();
        this.boolVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.byteVal = new ttypes.TByteValue();
        this.byteVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.i16Val = new ttypes.TI16Value();
        this.i16Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.i32Val = new ttypes.TI32Value();
        this.i32Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.i64Val = new ttypes.TI64Value();
        this.i64Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.doubleVal = new ttypes.TDoubleValue();
        this.doubleVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.stringVal = new ttypes.TStringValue();
        this.stringVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnValue.prototype.write = function(output) {
  output.writeStructBegin('TColumnValue');
  if (this.boolVal !== null && this.boolVal !== undefined) {
    output.writeFieldBegin('boolVal', Thrift.Type.STRUCT, 1);
    this.boolVal.write(output);
    output.writeFieldEnd();
  }
  if (this.byteVal !== null && this.byteVal !== undefined) {
    output.writeFieldBegin('byteVal', Thrift.Type.STRUCT, 2);
    this.byteVal.write(output);
    output.writeFieldEnd();
  }
  if (this.i16Val !== null && this.i16Val !== undefined) {
    output.writeFieldBegin('i16Val', Thrift.Type.STRUCT, 3);
    this.i16Val.write(output);
    output.writeFieldEnd();
  }
  if (this.i32Val !== null && this.i32Val !== undefined) {
    output.writeFieldBegin('i32Val', Thrift.Type.STRUCT, 4);
    this.i32Val.write(output);
    output.writeFieldEnd();
  }
  if (this.i64Val !== null && this.i64Val !== undefined) {
    output.writeFieldBegin('i64Val', Thrift.Type.STRUCT, 5);
    this.i64Val.write(output);
    output.writeFieldEnd();
  }
  if (this.doubleVal !== null && this.doubleVal !== undefined) {
    output.writeFieldBegin('doubleVal', Thrift.Type.STRUCT, 6);
    this.doubleVal.write(output);
    output.writeFieldEnd();
  }
  if (this.stringVal !== null && this.stringVal !== undefined) {
    output.writeFieldBegin('stringVal', Thrift.Type.STRUCT, 7);
    this.stringVal.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TRow = module.exports.TRow = function(args) {
  this.colVals = null;
  if (args) {
    if (args.colVals !== undefined && args.colVals !== null) {
      this.colVals = Thrift.copyList(args.colVals, [ttypes.TColumnValue]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colVals is unset!');
    }
  }
};
TRow.prototype = {};
TRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.colVals = [];
        var _rtmp332 = input.readListBegin();
        var _size31 = _rtmp332.size || 0;
        for (var _i33 = 0; _i33 < _size31; ++_i33) {
          var elem34 = null;
          elem34 = new ttypes.TColumnValue();
          elem34.read(input);
          this.colVals.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRow.prototype.write = function(output) {
  output.writeStructBegin('TRow');
  if (this.colVals !== null && this.colVals !== undefined) {
    output.writeFieldBegin('colVals', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.colVals.length);
    for (var iter35 in this.colVals) {
      if (this.colVals.hasOwnProperty(iter35)) {
        iter35 = this.colVals[iter35];
        iter35.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TBoolColumn = module.exports.TBoolColumn = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TBoolColumn.prototype = {};
TBoolColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp337 = input.readListBegin();
        var _size36 = _rtmp337.size || 0;
        for (var _i38 = 0; _i38 < _size36; ++_i38) {
          var elem39 = null;
          elem39 = input.readBool();
          this.values.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBoolColumn.prototype.write = function(output) {
  output.writeStructBegin('TBoolColumn');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.BOOL, this.values.length);
    for (var iter40 in this.values) {
      if (this.values.hasOwnProperty(iter40)) {
        iter40 = this.values[iter40];
        output.writeBool(iter40);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TByteColumn = module.exports.TByteColumn = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TByteColumn.prototype = {};
TByteColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp342 = input.readListBegin();
        var _size41 = _rtmp342.size || 0;
        for (var _i43 = 0; _i43 < _size41; ++_i43) {
          var elem44 = null;
          elem44 = input.readByte();
          this.values.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TByteColumn.prototype.write = function(output) {
  output.writeStructBegin('TByteColumn');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.BYTE, this.values.length);
    for (var iter45 in this.values) {
      if (this.values.hasOwnProperty(iter45)) {
        iter45 = this.values[iter45];
        output.writeByte(iter45);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TI16Column = module.exports.TI16Column = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TI16Column.prototype = {};
TI16Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp347 = input.readListBegin();
        var _size46 = _rtmp347.size || 0;
        for (var _i48 = 0; _i48 < _size46; ++_i48) {
          var elem49 = null;
          elem49 = input.readI16();
          this.values.push(elem49);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI16Column.prototype.write = function(output) {
  output.writeStructBegin('TI16Column');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I16, this.values.length);
    for (var iter50 in this.values) {
      if (this.values.hasOwnProperty(iter50)) {
        iter50 = this.values[iter50];
        output.writeI16(iter50);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TI32Column = module.exports.TI32Column = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TI32Column.prototype = {};
TI32Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp352 = input.readListBegin();
        var _size51 = _rtmp352.size || 0;
        for (var _i53 = 0; _i53 < _size51; ++_i53) {
          var elem54 = null;
          elem54 = input.readI32();
          this.values.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI32Column.prototype.write = function(output) {
  output.writeStructBegin('TI32Column');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.values.length);
    for (var iter55 in this.values) {
      if (this.values.hasOwnProperty(iter55)) {
        iter55 = this.values[iter55];
        output.writeI32(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TI64Column = module.exports.TI64Column = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TI64Column.prototype = {};
TI64Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp357 = input.readListBegin();
        var _size56 = _rtmp357.size || 0;
        for (var _i58 = 0; _i58 < _size56; ++_i58) {
          var elem59 = null;
          elem59 = input.readI64();
          this.values.push(elem59);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI64Column.prototype.write = function(output) {
  output.writeStructBegin('TI64Column');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.values.length);
    for (var iter60 in this.values) {
      if (this.values.hasOwnProperty(iter60)) {
        iter60 = this.values[iter60];
        output.writeI64(iter60);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TDoubleColumn = module.exports.TDoubleColumn = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TDoubleColumn.prototype = {};
TDoubleColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp362 = input.readListBegin();
        var _size61 = _rtmp362.size || 0;
        for (var _i63 = 0; _i63 < _size61; ++_i63) {
          var elem64 = null;
          elem64 = input.readDouble();
          this.values.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDoubleColumn.prototype.write = function(output) {
  output.writeStructBegin('TDoubleColumn');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.DOUBLE, this.values.length);
    for (var iter65 in this.values) {
      if (this.values.hasOwnProperty(iter65)) {
        iter65 = this.values[iter65];
        output.writeDouble(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TStringColumn = module.exports.TStringColumn = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TStringColumn.prototype = {};
TStringColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp367 = input.readListBegin();
        var _size66 = _rtmp367.size || 0;
        for (var _i68 = 0; _i68 < _size66; ++_i68) {
          var elem69 = null;
          elem69 = input.readString();
          this.values.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringColumn.prototype.write = function(output) {
  output.writeStructBegin('TStringColumn');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter70 in this.values) {
      if (this.values.hasOwnProperty(iter70)) {
        iter70 = this.values[iter70];
        output.writeString(iter70);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TBinaryColumn = module.exports.TBinaryColumn = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TBinaryColumn.prototype = {};
TBinaryColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp372 = input.readListBegin();
        var _size71 = _rtmp372.size || 0;
        for (var _i73 = 0; _i73 < _size71; ++_i73) {
          var elem74 = null;
          elem74 = input.readBinary();
          this.values.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBinaryColumn.prototype.write = function(output) {
  output.writeStructBegin('TBinaryColumn');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter75 in this.values) {
      if (this.values.hasOwnProperty(iter75)) {
        iter75 = this.values[iter75];
        output.writeBinary(iter75);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TColumn = module.exports.TColumn = function(args) {
  this.boolVal = null;
  this.byteVal = null;
  this.i16Val = null;
  this.i32Val = null;
  this.i64Val = null;
  this.doubleVal = null;
  this.stringVal = null;
  this.binaryVal = null;
  if (args) {
    if (args.boolVal !== undefined && args.boolVal !== null) {
      this.boolVal = new ttypes.TBoolColumn(args.boolVal);
    }
    if (args.byteVal !== undefined && args.byteVal !== null) {
      this.byteVal = new ttypes.TByteColumn(args.byteVal);
    }
    if (args.i16Val !== undefined && args.i16Val !== null) {
      this.i16Val = new ttypes.TI16Column(args.i16Val);
    }
    if (args.i32Val !== undefined && args.i32Val !== null) {
      this.i32Val = new ttypes.TI32Column(args.i32Val);
    }
    if (args.i64Val !== undefined && args.i64Val !== null) {
      this.i64Val = new ttypes.TI64Column(args.i64Val);
    }
    if (args.doubleVal !== undefined && args.doubleVal !== null) {
      this.doubleVal = new ttypes.TDoubleColumn(args.doubleVal);
    }
    if (args.stringVal !== undefined && args.stringVal !== null) {
      this.stringVal = new ttypes.TStringColumn(args.stringVal);
    }
    if (args.binaryVal !== undefined && args.binaryVal !== null) {
      this.binaryVal = new ttypes.TBinaryColumn(args.binaryVal);
    }
  }
};
TColumn.prototype = {};
TColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.boolVal = new ttypes.TBoolColumn();
        this.boolVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.byteVal = new ttypes.TByteColumn();
        this.byteVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.i16Val = new ttypes.TI16Column();
        this.i16Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.i32Val = new ttypes.TI32Column();
        this.i32Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.i64Val = new ttypes.TI64Column();
        this.i64Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.doubleVal = new ttypes.TDoubleColumn();
        this.doubleVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.stringVal = new ttypes.TStringColumn();
        this.stringVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.binaryVal = new ttypes.TBinaryColumn();
        this.binaryVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumn.prototype.write = function(output) {
  output.writeStructBegin('TColumn');
  if (this.boolVal !== null && this.boolVal !== undefined) {
    output.writeFieldBegin('boolVal', Thrift.Type.STRUCT, 1);
    this.boolVal.write(output);
    output.writeFieldEnd();
  }
  if (this.byteVal !== null && this.byteVal !== undefined) {
    output.writeFieldBegin('byteVal', Thrift.Type.STRUCT, 2);
    this.byteVal.write(output);
    output.writeFieldEnd();
  }
  if (this.i16Val !== null && this.i16Val !== undefined) {
    output.writeFieldBegin('i16Val', Thrift.Type.STRUCT, 3);
    this.i16Val.write(output);
    output.writeFieldEnd();
  }
  if (this.i32Val !== null && this.i32Val !== undefined) {
    output.writeFieldBegin('i32Val', Thrift.Type.STRUCT, 4);
    this.i32Val.write(output);
    output.writeFieldEnd();
  }
  if (this.i64Val !== null && this.i64Val !== undefined) {
    output.writeFieldBegin('i64Val', Thrift.Type.STRUCT, 5);
    this.i64Val.write(output);
    output.writeFieldEnd();
  }
  if (this.doubleVal !== null && this.doubleVal !== undefined) {
    output.writeFieldBegin('doubleVal', Thrift.Type.STRUCT, 6);
    this.doubleVal.write(output);
    output.writeFieldEnd();
  }
  if (this.stringVal !== null && this.stringVal !== undefined) {
    output.writeFieldBegin('stringVal', Thrift.Type.STRUCT, 7);
    this.stringVal.write(output);
    output.writeFieldEnd();
  }
  if (this.binaryVal !== null && this.binaryVal !== undefined) {
    output.writeFieldBegin('binaryVal', Thrift.Type.STRUCT, 8);
    this.binaryVal.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TDBSqlJsonArrayFormat = module.exports.TDBSqlJsonArrayFormat = function(args) {
  this.compressionCodec = null;
  if (args) {
    if (args.compressionCodec !== undefined && args.compressionCodec !== null) {
      this.compressionCodec = args.compressionCodec;
    }
  }
};
TDBSqlJsonArrayFormat.prototype = {};
TDBSqlJsonArrayFormat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.compressionCodec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlJsonArrayFormat.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlJsonArrayFormat');
  if (this.compressionCodec !== null && this.compressionCodec !== undefined) {
    output.writeFieldBegin('compressionCodec', Thrift.Type.I32, 1);
    output.writeI32(this.compressionCodec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TDBSqlCsvFormat = module.exports.TDBSqlCsvFormat = function(args) {
  this.compressionCodec = null;
  if (args) {
    if (args.compressionCodec !== undefined && args.compressionCodec !== null) {
      this.compressionCodec = args.compressionCodec;
    }
  }
};
TDBSqlCsvFormat.prototype = {};
TDBSqlCsvFormat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.compressionCodec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlCsvFormat.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlCsvFormat');
  if (this.compressionCodec !== null && this.compressionCodec !== undefined) {
    output.writeFieldBegin('compressionCodec', Thrift.Type.I32, 1);
    output.writeI32(this.compressionCodec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TDBSqlArrowFormat = module.exports.TDBSqlArrowFormat = function(args) {
  this.arrowLayout = null;
  this.compressionCodec = null;
  if (args) {
    if (args.arrowLayout !== undefined && args.arrowLayout !== null) {
      this.arrowLayout = args.arrowLayout;
    }
    if (args.compressionCodec !== undefined && args.compressionCodec !== null) {
      this.compressionCodec = args.compressionCodec;
    }
  }
};
TDBSqlArrowFormat.prototype = {};
TDBSqlArrowFormat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arrowLayout = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.compressionCodec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlArrowFormat.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlArrowFormat');
  if (this.arrowLayout !== null && this.arrowLayout !== undefined) {
    output.writeFieldBegin('arrowLayout', Thrift.Type.I32, 1);
    output.writeI32(this.arrowLayout);
    output.writeFieldEnd();
  }
  if (this.compressionCodec !== null && this.compressionCodec !== undefined) {
    output.writeFieldBegin('compressionCodec', Thrift.Type.I32, 2);
    output.writeI32(this.compressionCodec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TDBSqlResultFormat = module.exports.TDBSqlResultFormat = function(args) {
  this.arrowFormat = null;
  this.csvFormat = null;
  this.jsonArrayFormat = null;
  if (args) {
    if (args.arrowFormat !== undefined && args.arrowFormat !== null) {
      this.arrowFormat = new ttypes.TDBSqlArrowFormat(args.arrowFormat);
    }
    if (args.csvFormat !== undefined && args.csvFormat !== null) {
      this.csvFormat = new ttypes.TDBSqlCsvFormat(args.csvFormat);
    }
    if (args.jsonArrayFormat !== undefined && args.jsonArrayFormat !== null) {
      this.jsonArrayFormat = new ttypes.TDBSqlJsonArrayFormat(args.jsonArrayFormat);
    }
  }
};
TDBSqlResultFormat.prototype = {};
TDBSqlResultFormat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arrowFormat = new ttypes.TDBSqlArrowFormat();
        this.arrowFormat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.csvFormat = new ttypes.TDBSqlCsvFormat();
        this.csvFormat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.jsonArrayFormat = new ttypes.TDBSqlJsonArrayFormat();
        this.jsonArrayFormat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlResultFormat.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlResultFormat');
  if (this.arrowFormat !== null && this.arrowFormat !== undefined) {
    output.writeFieldBegin('arrowFormat', Thrift.Type.STRUCT, 1);
    this.arrowFormat.write(output);
    output.writeFieldEnd();
  }
  if (this.csvFormat !== null && this.csvFormat !== undefined) {
    output.writeFieldBegin('csvFormat', Thrift.Type.STRUCT, 2);
    this.csvFormat.write(output);
    output.writeFieldEnd();
  }
  if (this.jsonArrayFormat !== null && this.jsonArrayFormat !== undefined) {
    output.writeFieldBegin('jsonArrayFormat', Thrift.Type.STRUCT, 3);
    this.jsonArrayFormat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSparkArrowBatch = module.exports.TSparkArrowBatch = function(args) {
  this.batch = null;
  this.rowCount = null;
  if (args) {
    if (args.batch !== undefined && args.batch !== null) {
      this.batch = args.batch;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field batch is unset!');
    }
    if (args.rowCount !== undefined && args.rowCount !== null) {
      this.rowCount = args.rowCount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rowCount is unset!');
    }
  }
};
TSparkArrowBatch.prototype = {};
TSparkArrowBatch.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.batch = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.rowCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkArrowBatch.prototype.write = function(output) {
  output.writeStructBegin('TSparkArrowBatch');
  if (this.batch !== null && this.batch !== undefined) {
    output.writeFieldBegin('batch', Thrift.Type.STRING, 1);
    output.writeBinary(this.batch);
    output.writeFieldEnd();
  }
  if (this.rowCount !== null && this.rowCount !== undefined) {
    output.writeFieldBegin('rowCount', Thrift.Type.I64, 2);
    output.writeI64(this.rowCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSparkArrowResultLink = module.exports.TSparkArrowResultLink = function(args) {
  this.fileLink = null;
  this.expiryTime = null;
  this.startRowOffset = null;
  this.rowCount = null;
  this.bytesNum = null;
  this.httpHeaders = null;
  if (args) {
    if (args.fileLink !== undefined && args.fileLink !== null) {
      this.fileLink = args.fileLink;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fileLink is unset!');
    }
    if (args.expiryTime !== undefined && args.expiryTime !== null) {
      this.expiryTime = args.expiryTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiryTime is unset!');
    }
    if (args.startRowOffset !== undefined && args.startRowOffset !== null) {
      this.startRowOffset = args.startRowOffset;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRowOffset is unset!');
    }
    if (args.rowCount !== undefined && args.rowCount !== null) {
      this.rowCount = args.rowCount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rowCount is unset!');
    }
    if (args.bytesNum !== undefined && args.bytesNum !== null) {
      this.bytesNum = args.bytesNum;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bytesNum is unset!');
    }
    if (args.httpHeaders !== undefined && args.httpHeaders !== null) {
      this.httpHeaders = Thrift.copyMap(args.httpHeaders, [null]);
    }
  }
};
TSparkArrowResultLink.prototype = {};
TSparkArrowResultLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileLink = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiryTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startRowOffset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.rowCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.bytesNum = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.httpHeaders = {};
        var _rtmp377 = input.readMapBegin();
        var _size76 = _rtmp377.size || 0;
        for (var _i78 = 0; _i78 < _size76; ++_i78) {
          var key79 = null;
          var val80 = null;
          key79 = input.readString();
          val80 = input.readString();
          this.httpHeaders[key79] = val80;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkArrowResultLink.prototype.write = function(output) {
  output.writeStructBegin('TSparkArrowResultLink');
  if (this.fileLink !== null && this.fileLink !== undefined) {
    output.writeFieldBegin('fileLink', Thrift.Type.STRING, 1);
    output.writeString(this.fileLink);
    output.writeFieldEnd();
  }
  if (this.expiryTime !== null && this.expiryTime !== undefined) {
    output.writeFieldBegin('expiryTime', Thrift.Type.I64, 2);
    output.writeI64(this.expiryTime);
    output.writeFieldEnd();
  }
  if (this.startRowOffset !== null && this.startRowOffset !== undefined) {
    output.writeFieldBegin('startRowOffset', Thrift.Type.I64, 3);
    output.writeI64(this.startRowOffset);
    output.writeFieldEnd();
  }
  if (this.rowCount !== null && this.rowCount !== undefined) {
    output.writeFieldBegin('rowCount', Thrift.Type.I64, 4);
    output.writeI64(this.rowCount);
    output.writeFieldEnd();
  }
  if (this.bytesNum !== null && this.bytesNum !== undefined) {
    output.writeFieldBegin('bytesNum', Thrift.Type.I64, 5);
    output.writeI64(this.bytesNum);
    output.writeFieldEnd();
  }
  if (this.httpHeaders !== null && this.httpHeaders !== undefined) {
    output.writeFieldBegin('httpHeaders', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.httpHeaders));
    for (var kiter81 in this.httpHeaders) {
      if (this.httpHeaders.hasOwnProperty(kiter81)) {
        var viter82 = this.httpHeaders[kiter81];
        output.writeString(kiter81);
        output.writeString(viter82);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TRowSet = module.exports.TRowSet = function(args) {
  this.startRowOffset = null;
  this.rows = null;
  this.columns = null;
  this.binaryColumns = null;
  this.columnCount = null;
  this.arrowBatches = null;
  this.resultLinks = null;
  if (args) {
    if (args.startRowOffset !== undefined && args.startRowOffset !== null) {
      this.startRowOffset = args.startRowOffset;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRowOffset is unset!');
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rows is unset!');
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.TColumn]);
    }
    if (args.binaryColumns !== undefined && args.binaryColumns !== null) {
      this.binaryColumns = args.binaryColumns;
    }
    if (args.columnCount !== undefined && args.columnCount !== null) {
      this.columnCount = args.columnCount;
    }
    if (args.arrowBatches !== undefined && args.arrowBatches !== null) {
      this.arrowBatches = Thrift.copyList(args.arrowBatches, [ttypes.TSparkArrowBatch]);
    }
    if (args.resultLinks !== undefined && args.resultLinks !== null) {
      this.resultLinks = Thrift.copyList(args.resultLinks, [ttypes.TSparkArrowResultLink]);
    }
  }
};
TRowSet.prototype = {};
TRowSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.startRowOffset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.rows = [];
        var _rtmp384 = input.readListBegin();
        var _size83 = _rtmp384.size || 0;
        for (var _i85 = 0; _i85 < _size83; ++_i85) {
          var elem86 = null;
          elem86 = new ttypes.TRow();
          elem86.read(input);
          this.rows.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp388 = input.readListBegin();
        var _size87 = _rtmp388.size || 0;
        for (var _i89 = 0; _i89 < _size87; ++_i89) {
          var elem90 = null;
          elem90 = new ttypes.TColumn();
          elem90.read(input);
          this.columns.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.binaryColumns = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.columnCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.LIST) {
        this.arrowBatches = [];
        var _rtmp392 = input.readListBegin();
        var _size91 = _rtmp392.size || 0;
        for (var _i93 = 0; _i93 < _size91; ++_i93) {
          var elem94 = null;
          elem94 = new ttypes.TSparkArrowBatch();
          elem94.read(input);
          this.arrowBatches.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.LIST) {
        this.resultLinks = [];
        var _rtmp396 = input.readListBegin();
        var _size95 = _rtmp396.size || 0;
        for (var _i97 = 0; _i97 < _size95; ++_i97) {
          var elem98 = null;
          elem98 = new ttypes.TSparkArrowResultLink();
          elem98.read(input);
          this.resultLinks.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRowSet.prototype.write = function(output) {
  output.writeStructBegin('TRowSet');
  if (this.startRowOffset !== null && this.startRowOffset !== undefined) {
    output.writeFieldBegin('startRowOffset', Thrift.Type.I64, 1);
    output.writeI64(this.startRowOffset);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter99 in this.rows) {
      if (this.rows.hasOwnProperty(iter99)) {
        iter99 = this.rows[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter100 in this.columns) {
      if (this.columns.hasOwnProperty(iter100)) {
        iter100 = this.columns[iter100];
        iter100.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.binaryColumns !== null && this.binaryColumns !== undefined) {
    output.writeFieldBegin('binaryColumns', Thrift.Type.STRING, 4);
    output.writeBinary(this.binaryColumns);
    output.writeFieldEnd();
  }
  if (this.columnCount !== null && this.columnCount !== undefined) {
    output.writeFieldBegin('columnCount', Thrift.Type.I32, 5);
    output.writeI32(this.columnCount);
    output.writeFieldEnd();
  }
  if (this.arrowBatches !== null && this.arrowBatches !== undefined) {
    output.writeFieldBegin('arrowBatches', Thrift.Type.LIST, 1281);
    output.writeListBegin(Thrift.Type.STRUCT, this.arrowBatches.length);
    for (var iter101 in this.arrowBatches) {
      if (this.arrowBatches.hasOwnProperty(iter101)) {
        iter101 = this.arrowBatches[iter101];
        iter101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resultLinks !== null && this.resultLinks !== undefined) {
    output.writeFieldBegin('resultLinks', Thrift.Type.LIST, 1282);
    output.writeListBegin(Thrift.Type.STRUCT, this.resultLinks.length);
    for (var iter102 in this.resultLinks) {
      if (this.resultLinks.hasOwnProperty(iter102)) {
        iter102 = this.resultLinks[iter102];
        iter102.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TStatus = module.exports.TStatus = function(args) {
  this.statusCode = null;
  this.infoMessages = null;
  this.sqlState = null;
  this.errorCode = null;
  this.errorMessage = null;
  this.displayMessage = null;
  this.errorDetailsJson = null;
  if (args) {
    if (args.statusCode !== undefined && args.statusCode !== null) {
      this.statusCode = args.statusCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statusCode is unset!');
    }
    if (args.infoMessages !== undefined && args.infoMessages !== null) {
      this.infoMessages = Thrift.copyList(args.infoMessages, [null]);
    }
    if (args.sqlState !== undefined && args.sqlState !== null) {
      this.sqlState = args.sqlState;
    }
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.errorMessage !== undefined && args.errorMessage !== null) {
      this.errorMessage = args.errorMessage;
    }
    if (args.displayMessage !== undefined && args.displayMessage !== null) {
      this.displayMessage = args.displayMessage;
    }
    if (args.errorDetailsJson !== undefined && args.errorDetailsJson !== null) {
      this.errorDetailsJson = args.errorDetailsJson;
    }
  }
};
TStatus.prototype = {};
TStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.statusCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.infoMessages = [];
        var _rtmp3104 = input.readListBegin();
        var _size103 = _rtmp3104.size || 0;
        for (var _i105 = 0; _i105 < _size103; ++_i105) {
          var elem106 = null;
          elem106 = input.readString();
          this.infoMessages.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sqlState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.displayMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRING) {
        this.errorDetailsJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStatus.prototype.write = function(output) {
  output.writeStructBegin('TStatus');
  if (this.statusCode !== null && this.statusCode !== undefined) {
    output.writeFieldBegin('statusCode', Thrift.Type.I32, 1);
    output.writeI32(this.statusCode);
    output.writeFieldEnd();
  }
  if (this.infoMessages !== null && this.infoMessages !== undefined) {
    output.writeFieldBegin('infoMessages', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.infoMessages.length);
    for (var iter107 in this.infoMessages) {
      if (this.infoMessages.hasOwnProperty(iter107)) {
        iter107 = this.infoMessages[iter107];
        output.writeString(iter107);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sqlState !== null && this.sqlState !== undefined) {
    output.writeFieldBegin('sqlState', Thrift.Type.STRING, 3);
    output.writeString(this.sqlState);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 4);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 5);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  if (this.displayMessage !== null && this.displayMessage !== undefined) {
    output.writeFieldBegin('displayMessage', Thrift.Type.STRING, 6);
    output.writeString(this.displayMessage);
    output.writeFieldEnd();
  }
  if (this.errorDetailsJson !== null && this.errorDetailsJson !== undefined) {
    output.writeFieldBegin('errorDetailsJson', Thrift.Type.STRING, 1281);
    output.writeString(this.errorDetailsJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TNamespace = module.exports.TNamespace = function(args) {
  this.catalogName = null;
  this.schemaName = null;
  if (args) {
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
  }
};
TNamespace.prototype = {};
TNamespace.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TNamespace.prototype.write = function(output) {
  output.writeStructBegin('TNamespace');
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 1);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 2);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THandleIdentifier = module.exports.THandleIdentifier = function(args) {
  this.guid = null;
  this.secret = null;
  if (args) {
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field guid is unset!');
    }
    if (args.secret !== undefined && args.secret !== null) {
      this.secret = args.secret;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field secret is unset!');
    }
  }
};
THandleIdentifier.prototype = {};
THandleIdentifier.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THandleIdentifier.prototype.write = function(output) {
  output.writeStructBegin('THandleIdentifier');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeBinary(this.guid);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 2);
    output.writeBinary(this.secret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSessionHandle = module.exports.TSessionHandle = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new ttypes.THandleIdentifier(args.sessionId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
  }
};
TSessionHandle.prototype = {};
TSessionHandle.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new ttypes.THandleIdentifier();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSessionHandle.prototype.write = function(output) {
  output.writeStructBegin('TSessionHandle');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TOperationHandle = module.exports.TOperationHandle = function(args) {
  this.operationId = null;
  this.operationType = null;
  this.hasResultSet = null;
  this.modifiedRowCount = null;
  if (args) {
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationId is unset!');
    }
    if (args.operationType !== undefined && args.operationType !== null) {
      this.operationType = args.operationType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationType is unset!');
    }
    if (args.hasResultSet !== undefined && args.hasResultSet !== null) {
      this.hasResultSet = args.hasResultSet;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hasResultSet is unset!');
    }
    if (args.modifiedRowCount !== undefined && args.modifiedRowCount !== null) {
      this.modifiedRowCount = args.modifiedRowCount;
    }
  }
};
TOperationHandle.prototype = {};
TOperationHandle.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.hasResultSet = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.modifiedRowCount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TOperationHandle.prototype.write = function(output) {
  output.writeStructBegin('TOperationHandle');
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 1);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.operationType !== null && this.operationType !== undefined) {
    output.writeFieldBegin('operationType', Thrift.Type.I32, 2);
    output.writeI32(this.operationType);
    output.writeFieldEnd();
  }
  if (this.hasResultSet !== null && this.hasResultSet !== undefined) {
    output.writeFieldBegin('hasResultSet', Thrift.Type.BOOL, 3);
    output.writeBool(this.hasResultSet);
    output.writeFieldEnd();
  }
  if (this.modifiedRowCount !== null && this.modifiedRowCount !== undefined) {
    output.writeFieldBegin('modifiedRowCount', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.modifiedRowCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TOpenSessionReq = module.exports.TOpenSessionReq = function(args) {
  this.client_protocol = -7;
  this.username = null;
  this.password = null;
  this.configuration = null;
  this.getInfos = null;
  this.client_protocol_i64 = null;
  this.connectionProperties = null;
  this.initialNamespace = null;
  this.canUseMultipleCatalogs = null;
  if (args) {
    if (args.client_protocol !== undefined && args.client_protocol !== null) {
      this.client_protocol = args.client_protocol;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = Thrift.copyMap(args.configuration, [null]);
    }
    if (args.getInfos !== undefined && args.getInfos !== null) {
      this.getInfos = Thrift.copyList(args.getInfos, [null]);
    }
    if (args.client_protocol_i64 !== undefined && args.client_protocol_i64 !== null) {
      this.client_protocol_i64 = args.client_protocol_i64;
    }
    if (args.connectionProperties !== undefined && args.connectionProperties !== null) {
      this.connectionProperties = Thrift.copyMap(args.connectionProperties, [null]);
    }
    if (args.initialNamespace !== undefined && args.initialNamespace !== null) {
      this.initialNamespace = new ttypes.TNamespace(args.initialNamespace);
    }
    if (args.canUseMultipleCatalogs !== undefined && args.canUseMultipleCatalogs !== null) {
      this.canUseMultipleCatalogs = args.canUseMultipleCatalogs;
    }
  }
};
TOpenSessionReq.prototype = {};
TOpenSessionReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.client_protocol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.configuration = {};
        var _rtmp3109 = input.readMapBegin();
        var _size108 = _rtmp3109.size || 0;
        for (var _i110 = 0; _i110 < _size108; ++_i110) {
          var key111 = null;
          var val112 = null;
          key111 = input.readString();
          val112 = input.readString();
          this.configuration[key111] = val112;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.LIST) {
        this.getInfos = [];
        var _rtmp3114 = input.readListBegin();
        var _size113 = _rtmp3114.size || 0;
        for (var _i115 = 0; _i115 < _size113; ++_i115) {
          var elem116 = null;
          elem116 = input.readI32();
          this.getInfos.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.I64) {
        this.client_protocol_i64 = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1283:
      if (ftype == Thrift.Type.MAP) {
        this.connectionProperties = {};
        var _rtmp3118 = input.readMapBegin();
        var _size117 = _rtmp3118.size || 0;
        for (var _i119 = 0; _i119 < _size117; ++_i119) {
          var key120 = null;
          var val121 = null;
          key120 = input.readString();
          val121 = input.readString();
          this.connectionProperties[key120] = val121;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1284:
      if (ftype == Thrift.Type.STRUCT) {
        this.initialNamespace = new ttypes.TNamespace();
        this.initialNamespace.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1285:
      if (ftype == Thrift.Type.BOOL) {
        this.canUseMultipleCatalogs = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TOpenSessionReq.prototype.write = function(output) {
  output.writeStructBegin('TOpenSessionReq');
  if (this.client_protocol !== null && this.client_protocol !== undefined) {
    output.writeFieldBegin('client_protocol', Thrift.Type.I32, 1);
    output.writeI32(this.client_protocol);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter122 in this.configuration) {
      if (this.configuration.hasOwnProperty(kiter122)) {
        var viter123 = this.configuration[kiter122];
        output.writeString(kiter122);
        output.writeString(viter123);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.getInfos !== null && this.getInfos !== undefined) {
    output.writeFieldBegin('getInfos', Thrift.Type.LIST, 1281);
    output.writeListBegin(Thrift.Type.I32, this.getInfos.length);
    for (var iter124 in this.getInfos) {
      if (this.getInfos.hasOwnProperty(iter124)) {
        iter124 = this.getInfos[iter124];
        output.writeI32(iter124);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.client_protocol_i64 !== null && this.client_protocol_i64 !== undefined) {
    output.writeFieldBegin('client_protocol_i64', Thrift.Type.I64, 1282);
    output.writeI64(this.client_protocol_i64);
    output.writeFieldEnd();
  }
  if (this.connectionProperties !== null && this.connectionProperties !== undefined) {
    output.writeFieldBegin('connectionProperties', Thrift.Type.MAP, 1283);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.connectionProperties));
    for (var kiter125 in this.connectionProperties) {
      if (this.connectionProperties.hasOwnProperty(kiter125)) {
        var viter126 = this.connectionProperties[kiter125];
        output.writeString(kiter125);
        output.writeString(viter126);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.initialNamespace !== null && this.initialNamespace !== undefined) {
    output.writeFieldBegin('initialNamespace', Thrift.Type.STRUCT, 1284);
    this.initialNamespace.write(output);
    output.writeFieldEnd();
  }
  if (this.canUseMultipleCatalogs !== null && this.canUseMultipleCatalogs !== undefined) {
    output.writeFieldBegin('canUseMultipleCatalogs', Thrift.Type.BOOL, 1285);
    output.writeBool(this.canUseMultipleCatalogs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TOpenSessionResp = module.exports.TOpenSessionResp = function(args) {
  this.status = null;
  this.serverProtocolVersion = null;
  this.sessionHandle = null;
  this.configuration = null;
  this.initialNamespace = null;
  this.canUseMultipleCatalogs = null;
  this.getInfos = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.serverProtocolVersion !== undefined && args.serverProtocolVersion !== null) {
      this.serverProtocolVersion = args.serverProtocolVersion;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serverProtocolVersion is unset!');
    }
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = Thrift.copyMap(args.configuration, [null]);
    }
    if (args.initialNamespace !== undefined && args.initialNamespace !== null) {
      this.initialNamespace = new ttypes.TNamespace(args.initialNamespace);
    }
    if (args.canUseMultipleCatalogs !== undefined && args.canUseMultipleCatalogs !== null) {
      this.canUseMultipleCatalogs = args.canUseMultipleCatalogs;
    }
    if (args.getInfos !== undefined && args.getInfos !== null) {
      this.getInfos = Thrift.copyList(args.getInfos, [null]);
    }
  }
};
TOpenSessionResp.prototype = {};
TOpenSessionResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.serverProtocolVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.configuration = {};
        var _rtmp3128 = input.readMapBegin();
        var _size127 = _rtmp3128.size || 0;
        for (var _i129 = 0; _i129 < _size127; ++_i129) {
          var key130 = null;
          var val131 = null;
          key130 = input.readString();
          val131 = input.readString();
          this.configuration[key130] = val131;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1284:
      if (ftype == Thrift.Type.STRUCT) {
        this.initialNamespace = new ttypes.TNamespace();
        this.initialNamespace.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1285:
      if (ftype == Thrift.Type.BOOL) {
        this.canUseMultipleCatalogs = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.LIST) {
        this.getInfos = [];
        var _rtmp3133 = input.readListBegin();
        var _size132 = _rtmp3133.size || 0;
        for (var _i134 = 0; _i134 < _size132; ++_i134) {
          var elem135 = null;
          elem135 = new ttypes.TGetInfoValue();
          elem135.read(input);
          this.getInfos.push(elem135);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TOpenSessionResp.prototype.write = function(output) {
  output.writeStructBegin('TOpenSessionResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.serverProtocolVersion !== null && this.serverProtocolVersion !== undefined) {
    output.writeFieldBegin('serverProtocolVersion', Thrift.Type.I32, 2);
    output.writeI32(this.serverProtocolVersion);
    output.writeFieldEnd();
  }
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 3);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter136 in this.configuration) {
      if (this.configuration.hasOwnProperty(kiter136)) {
        var viter137 = this.configuration[kiter136];
        output.writeString(kiter136);
        output.writeString(viter137);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.initialNamespace !== null && this.initialNamespace !== undefined) {
    output.writeFieldBegin('initialNamespace', Thrift.Type.STRUCT, 1284);
    this.initialNamespace.write(output);
    output.writeFieldEnd();
  }
  if (this.canUseMultipleCatalogs !== null && this.canUseMultipleCatalogs !== undefined) {
    output.writeFieldBegin('canUseMultipleCatalogs', Thrift.Type.BOOL, 1285);
    output.writeBool(this.canUseMultipleCatalogs);
    output.writeFieldEnd();
  }
  if (this.getInfos !== null && this.getInfos !== undefined) {
    output.writeFieldBegin('getInfos', Thrift.Type.LIST, 1281);
    output.writeListBegin(Thrift.Type.STRUCT, this.getInfos.length);
    for (var iter138 in this.getInfos) {
      if (this.getInfos.hasOwnProperty(iter138)) {
        iter138 = this.getInfos[iter138];
        iter138.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCloseSessionReq = module.exports.TCloseSessionReq = function(args) {
  this.sessionHandle = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
  }
};
TCloseSessionReq.prototype = {};
TCloseSessionReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseSessionReq.prototype.write = function(output) {
  output.writeStructBegin('TCloseSessionReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCloseSessionResp = module.exports.TCloseSessionResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCloseSessionResp.prototype = {};
TCloseSessionResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseSessionResp.prototype.write = function(output) {
  output.writeStructBegin('TCloseSessionResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetInfoValue = module.exports.TGetInfoValue = function(args) {
  this.stringValue = null;
  this.smallIntValue = null;
  this.integerBitmask = null;
  this.integerFlag = null;
  this.binaryValue = null;
  this.lenValue = null;
  if (args) {
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
    if (args.smallIntValue !== undefined && args.smallIntValue !== null) {
      this.smallIntValue = args.smallIntValue;
    }
    if (args.integerBitmask !== undefined && args.integerBitmask !== null) {
      this.integerBitmask = args.integerBitmask;
    }
    if (args.integerFlag !== undefined && args.integerFlag !== null) {
      this.integerFlag = args.integerFlag;
    }
    if (args.binaryValue !== undefined && args.binaryValue !== null) {
      this.binaryValue = args.binaryValue;
    }
    if (args.lenValue !== undefined && args.lenValue !== null) {
      this.lenValue = args.lenValue;
    }
  }
};
TGetInfoValue.prototype = {};
TGetInfoValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.smallIntValue = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.integerBitmask = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.integerFlag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.binaryValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.lenValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetInfoValue.prototype.write = function(output) {
  output.writeStructBegin('TGetInfoValue');
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 1);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.smallIntValue !== null && this.smallIntValue !== undefined) {
    output.writeFieldBegin('smallIntValue', Thrift.Type.I16, 2);
    output.writeI16(this.smallIntValue);
    output.writeFieldEnd();
  }
  if (this.integerBitmask !== null && this.integerBitmask !== undefined) {
    output.writeFieldBegin('integerBitmask', Thrift.Type.I32, 3);
    output.writeI32(this.integerBitmask);
    output.writeFieldEnd();
  }
  if (this.integerFlag !== null && this.integerFlag !== undefined) {
    output.writeFieldBegin('integerFlag', Thrift.Type.I32, 4);
    output.writeI32(this.integerFlag);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.I32, 5);
    output.writeI32(this.binaryValue);
    output.writeFieldEnd();
  }
  if (this.lenValue !== null && this.lenValue !== undefined) {
    output.writeFieldBegin('lenValue', Thrift.Type.I64, 6);
    output.writeI64(this.lenValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetInfoReq = module.exports.TGetInfoReq = function(args) {
  this.sessionHandle = null;
  this.infoType = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.infoType !== undefined && args.infoType !== null) {
      this.infoType = args.infoType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field infoType is unset!');
    }
  }
};
TGetInfoReq.prototype = {};
TGetInfoReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.infoType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetInfoReq.prototype.write = function(output) {
  output.writeStructBegin('TGetInfoReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.infoType !== null && this.infoType !== undefined) {
    output.writeFieldBegin('infoType', Thrift.Type.I32, 2);
    output.writeI32(this.infoType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetInfoResp = module.exports.TGetInfoResp = function(args) {
  this.status = null;
  this.infoValue = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.infoValue !== undefined && args.infoValue !== null) {
      this.infoValue = new ttypes.TGetInfoValue(args.infoValue);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field infoValue is unset!');
    }
  }
};
TGetInfoResp.prototype = {};
TGetInfoResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.infoValue = new ttypes.TGetInfoValue();
        this.infoValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetInfoResp.prototype.write = function(output) {
  output.writeStructBegin('TGetInfoResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.infoValue !== null && this.infoValue !== undefined) {
    output.writeFieldBegin('infoValue', Thrift.Type.STRUCT, 2);
    this.infoValue.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSparkGetDirectResults = module.exports.TSparkGetDirectResults = function(args) {
  this.maxRows = null;
  this.maxBytes = null;
  if (args) {
    if (args.maxRows !== undefined && args.maxRows !== null) {
      this.maxRows = args.maxRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxRows is unset!');
    }
    if (args.maxBytes !== undefined && args.maxBytes !== null) {
      this.maxBytes = args.maxBytes;
    }
  }
};
TSparkGetDirectResults.prototype = {};
TSparkGetDirectResults.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.maxRows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.maxBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkGetDirectResults.prototype.write = function(output) {
  output.writeStructBegin('TSparkGetDirectResults');
  if (this.maxRows !== null && this.maxRows !== undefined) {
    output.writeFieldBegin('maxRows', Thrift.Type.I64, 1);
    output.writeI64(this.maxRows);
    output.writeFieldEnd();
  }
  if (this.maxBytes !== null && this.maxBytes !== undefined) {
    output.writeFieldBegin('maxBytes', Thrift.Type.I64, 2);
    output.writeI64(this.maxBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSparkDirectResults = module.exports.TSparkDirectResults = function(args) {
  this.operationStatus = null;
  this.resultSetMetadata = null;
  this.resultSet = null;
  this.closeOperation = null;
  if (args) {
    if (args.operationStatus !== undefined && args.operationStatus !== null) {
      this.operationStatus = new ttypes.TGetOperationStatusResp(args.operationStatus);
    }
    if (args.resultSetMetadata !== undefined && args.resultSetMetadata !== null) {
      this.resultSetMetadata = new ttypes.TGetResultSetMetadataResp(args.resultSetMetadata);
    }
    if (args.resultSet !== undefined && args.resultSet !== null) {
      this.resultSet = new ttypes.TFetchResultsResp(args.resultSet);
    }
    if (args.closeOperation !== undefined && args.closeOperation !== null) {
      this.closeOperation = new ttypes.TCloseOperationResp(args.closeOperation);
    }
  }
};
TSparkDirectResults.prototype = {};
TSparkDirectResults.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationStatus = new ttypes.TGetOperationStatusResp();
        this.operationStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetMetadata = new ttypes.TGetResultSetMetadataResp();
        this.resultSetMetadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSet = new ttypes.TFetchResultsResp();
        this.resultSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.closeOperation = new ttypes.TCloseOperationResp();
        this.closeOperation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkDirectResults.prototype.write = function(output) {
  output.writeStructBegin('TSparkDirectResults');
  if (this.operationStatus !== null && this.operationStatus !== undefined) {
    output.writeFieldBegin('operationStatus', Thrift.Type.STRUCT, 1);
    this.operationStatus.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetMetadata !== null && this.resultSetMetadata !== undefined) {
    output.writeFieldBegin('resultSetMetadata', Thrift.Type.STRUCT, 2);
    this.resultSetMetadata.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSet !== null && this.resultSet !== undefined) {
    output.writeFieldBegin('resultSet', Thrift.Type.STRUCT, 3);
    this.resultSet.write(output);
    output.writeFieldEnd();
  }
  if (this.closeOperation !== null && this.closeOperation !== undefined) {
    output.writeFieldBegin('closeOperation', Thrift.Type.STRUCT, 4);
    this.closeOperation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSparkArrowTypes = module.exports.TSparkArrowTypes = function(args) {
  this.timestampAsArrow = null;
  this.decimalAsArrow = null;
  this.complexTypesAsArrow = null;
  this.intervalTypesAsArrow = null;
  this.nullTypeAsArrow = null;
  if (args) {
    if (args.timestampAsArrow !== undefined && args.timestampAsArrow !== null) {
      this.timestampAsArrow = args.timestampAsArrow;
    }
    if (args.decimalAsArrow !== undefined && args.decimalAsArrow !== null) {
      this.decimalAsArrow = args.decimalAsArrow;
    }
    if (args.complexTypesAsArrow !== undefined && args.complexTypesAsArrow !== null) {
      this.complexTypesAsArrow = args.complexTypesAsArrow;
    }
    if (args.intervalTypesAsArrow !== undefined && args.intervalTypesAsArrow !== null) {
      this.intervalTypesAsArrow = args.intervalTypesAsArrow;
    }
    if (args.nullTypeAsArrow !== undefined && args.nullTypeAsArrow !== null) {
      this.nullTypeAsArrow = args.nullTypeAsArrow;
    }
  }
};
TSparkArrowTypes.prototype = {};
TSparkArrowTypes.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.timestampAsArrow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.decimalAsArrow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.complexTypesAsArrow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.intervalTypesAsArrow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.nullTypeAsArrow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkArrowTypes.prototype.write = function(output) {
  output.writeStructBegin('TSparkArrowTypes');
  if (this.timestampAsArrow !== null && this.timestampAsArrow !== undefined) {
    output.writeFieldBegin('timestampAsArrow', Thrift.Type.BOOL, 1);
    output.writeBool(this.timestampAsArrow);
    output.writeFieldEnd();
  }
  if (this.decimalAsArrow !== null && this.decimalAsArrow !== undefined) {
    output.writeFieldBegin('decimalAsArrow', Thrift.Type.BOOL, 2);
    output.writeBool(this.decimalAsArrow);
    output.writeFieldEnd();
  }
  if (this.complexTypesAsArrow !== null && this.complexTypesAsArrow !== undefined) {
    output.writeFieldBegin('complexTypesAsArrow', Thrift.Type.BOOL, 3);
    output.writeBool(this.complexTypesAsArrow);
    output.writeFieldEnd();
  }
  if (this.intervalTypesAsArrow !== null && this.intervalTypesAsArrow !== undefined) {
    output.writeFieldBegin('intervalTypesAsArrow', Thrift.Type.BOOL, 4);
    output.writeBool(this.intervalTypesAsArrow);
    output.writeFieldEnd();
  }
  if (this.nullTypeAsArrow !== null && this.nullTypeAsArrow !== undefined) {
    output.writeFieldBegin('nullTypeAsArrow', Thrift.Type.BOOL, 5);
    output.writeBool(this.nullTypeAsArrow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TExecuteStatementReq = module.exports.TExecuteStatementReq = function(args) {
  this.sessionHandle = null;
  this.statement = null;
  this.confOverlay = null;
  this.runAsync = false;
  this.getDirectResults = null;
  this.queryTimeout = new Int64(0);
  this.canReadArrowResult = null;
  this.canDownloadResult = null;
  this.canDecompressLZ4Result = null;
  this.maxBytesPerFile = null;
  this.useArrowNativeTypes = null;
  this.resultRowLimit = null;
  this.parameters = null;
  this.maxBytesPerBatch = null;
  this.statementConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.statement !== undefined && args.statement !== null) {
      this.statement = args.statement;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statement is unset!');
    }
    if (args.confOverlay !== undefined && args.confOverlay !== null) {
      this.confOverlay = Thrift.copyMap(args.confOverlay, [null]);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.queryTimeout !== undefined && args.queryTimeout !== null) {
      this.queryTimeout = args.queryTimeout;
    }
    if (args.canReadArrowResult !== undefined && args.canReadArrowResult !== null) {
      this.canReadArrowResult = args.canReadArrowResult;
    }
    if (args.canDownloadResult !== undefined && args.canDownloadResult !== null) {
      this.canDownloadResult = args.canDownloadResult;
    }
    if (args.canDecompressLZ4Result !== undefined && args.canDecompressLZ4Result !== null) {
      this.canDecompressLZ4Result = args.canDecompressLZ4Result;
    }
    if (args.maxBytesPerFile !== undefined && args.maxBytesPerFile !== null) {
      this.maxBytesPerFile = args.maxBytesPerFile;
    }
    if (args.useArrowNativeTypes !== undefined && args.useArrowNativeTypes !== null) {
      this.useArrowNativeTypes = new ttypes.TSparkArrowTypes(args.useArrowNativeTypes);
    }
    if (args.resultRowLimit !== undefined && args.resultRowLimit !== null) {
      this.resultRowLimit = args.resultRowLimit;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyList(args.parameters, [ttypes.TSparkParameter]);
    }
    if (args.maxBytesPerBatch !== undefined && args.maxBytesPerBatch !== null) {
      this.maxBytesPerBatch = args.maxBytesPerBatch;
    }
    if (args.statementConf !== undefined && args.statementConf !== null) {
      this.statementConf = new ttypes.TStatementConf(args.statementConf);
    }
  }
};
TExecuteStatementReq.prototype = {};
TExecuteStatementReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.confOverlay = {};
        var _rtmp3140 = input.readMapBegin();
        var _size139 = _rtmp3140.size || 0;
        for (var _i141 = 0; _i141 < _size139; ++_i141) {
          var key142 = null;
          var val143 = null;
          key142 = input.readString();
          val143 = input.readString();
          this.confOverlay[key142] = val143;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.queryTimeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.canReadArrowResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1283:
      if (ftype == Thrift.Type.BOOL) {
        this.canDownloadResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1284:
      if (ftype == Thrift.Type.BOOL) {
        this.canDecompressLZ4Result = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1285:
      if (ftype == Thrift.Type.I64) {
        this.maxBytesPerFile = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1286:
      if (ftype == Thrift.Type.STRUCT) {
        this.useArrowNativeTypes = new ttypes.TSparkArrowTypes();
        this.useArrowNativeTypes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1287:
      if (ftype == Thrift.Type.I64) {
        this.resultRowLimit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1288:
      if (ftype == Thrift.Type.LIST) {
        this.parameters = [];
        var _rtmp3145 = input.readListBegin();
        var _size144 = _rtmp3145.size || 0;
        for (var _i146 = 0; _i146 < _size144; ++_i146) {
          var elem147 = null;
          elem147 = new ttypes.TSparkParameter();
          elem147.read(input);
          this.parameters.push(elem147);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1289:
      if (ftype == Thrift.Type.I64) {
        this.maxBytesPerBatch = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1296:
      if (ftype == Thrift.Type.STRUCT) {
        this.statementConf = new ttypes.TStatementConf();
        this.statementConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TExecuteStatementReq.prototype.write = function(output) {
  output.writeStructBegin('TExecuteStatementReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 2);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  if (this.confOverlay !== null && this.confOverlay !== undefined) {
    output.writeFieldBegin('confOverlay', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.confOverlay));
    for (var kiter148 in this.confOverlay) {
      if (this.confOverlay.hasOwnProperty(kiter148)) {
        var viter149 = this.confOverlay[kiter148];
        output.writeString(kiter148);
        output.writeString(viter149);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 4);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.queryTimeout !== null && this.queryTimeout !== undefined) {
    output.writeFieldBegin('queryTimeout', Thrift.Type.I64, 5);
    output.writeI64(this.queryTimeout);
    output.writeFieldEnd();
  }
  if (this.canReadArrowResult !== null && this.canReadArrowResult !== undefined) {
    output.writeFieldBegin('canReadArrowResult', Thrift.Type.BOOL, 1282);
    output.writeBool(this.canReadArrowResult);
    output.writeFieldEnd();
  }
  if (this.canDownloadResult !== null && this.canDownloadResult !== undefined) {
    output.writeFieldBegin('canDownloadResult', Thrift.Type.BOOL, 1283);
    output.writeBool(this.canDownloadResult);
    output.writeFieldEnd();
  }
  if (this.canDecompressLZ4Result !== null && this.canDecompressLZ4Result !== undefined) {
    output.writeFieldBegin('canDecompressLZ4Result', Thrift.Type.BOOL, 1284);
    output.writeBool(this.canDecompressLZ4Result);
    output.writeFieldEnd();
  }
  if (this.maxBytesPerFile !== null && this.maxBytesPerFile !== undefined) {
    output.writeFieldBegin('maxBytesPerFile', Thrift.Type.I64, 1285);
    output.writeI64(this.maxBytesPerFile);
    output.writeFieldEnd();
  }
  if (this.useArrowNativeTypes !== null && this.useArrowNativeTypes !== undefined) {
    output.writeFieldBegin('useArrowNativeTypes', Thrift.Type.STRUCT, 1286);
    this.useArrowNativeTypes.write(output);
    output.writeFieldEnd();
  }
  if (this.resultRowLimit !== null && this.resultRowLimit !== undefined) {
    output.writeFieldBegin('resultRowLimit', Thrift.Type.I64, 1287);
    output.writeI64(this.resultRowLimit);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 1288);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameters.length);
    for (var iter150 in this.parameters) {
      if (this.parameters.hasOwnProperty(iter150)) {
        iter150 = this.parameters[iter150];
        iter150.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.maxBytesPerBatch !== null && this.maxBytesPerBatch !== undefined) {
    output.writeFieldBegin('maxBytesPerBatch', Thrift.Type.I64, 1289);
    output.writeI64(this.maxBytesPerBatch);
    output.writeFieldEnd();
  }
  if (this.statementConf !== null && this.statementConf !== undefined) {
    output.writeFieldBegin('statementConf', Thrift.Type.STRUCT, 1296);
    this.statementConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSparkParameterValue = module.exports.TSparkParameterValue = function(args) {
  this.stringValue = null;
  this.doubleValue = null;
  this.booleanValue = null;
  if (args) {
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
    if (args.doubleValue !== undefined && args.doubleValue !== null) {
      this.doubleValue = args.doubleValue;
    }
    if (args.booleanValue !== undefined && args.booleanValue !== null) {
      this.booleanValue = args.booleanValue;
    }
  }
};
TSparkParameterValue.prototype = {};
TSparkParameterValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.booleanValue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkParameterValue.prototype.write = function(output) {
  output.writeStructBegin('TSparkParameterValue');
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 1);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.booleanValue !== null && this.booleanValue !== undefined) {
    output.writeFieldBegin('booleanValue', Thrift.Type.BOOL, 3);
    output.writeBool(this.booleanValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSparkParameterValueArg = module.exports.TSparkParameterValueArg = function(args) {
  this.type = null;
  this.value = null;
  this.arguments = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.arguments !== undefined && args.arguments !== null) {
      this.arguments = Thrift.copyList(args.arguments, [null]);
    }
  }
};
TSparkParameterValueArg.prototype = {};
TSparkParameterValueArg.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.arguments = [];
        var _rtmp3152 = input.readListBegin();
        var _size151 = _rtmp3152.size || 0;
        for (var _i153 = 0; _i153 < _size151; ++_i153) {
          var elem154 = null;
          elem154 = new ttypes.TSparkParameterValueArg();
          elem154.read(input);
          this.arguments.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkParameterValueArg.prototype.write = function(output) {
  output.writeStructBegin('TSparkParameterValueArg');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.arguments.length);
    for (var iter155 in this.arguments) {
      if (this.arguments.hasOwnProperty(iter155)) {
        iter155 = this.arguments[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSparkParameter = module.exports.TSparkParameter = function(args) {
  this.ordinal = null;
  this.name = null;
  this.type = null;
  this.value = null;
  this.arguments = null;
  if (args) {
    if (args.ordinal !== undefined && args.ordinal !== null) {
      this.ordinal = args.ordinal;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ttypes.TSparkParameterValue(args.value);
    }
    if (args.arguments !== undefined && args.arguments !== null) {
      this.arguments = Thrift.copyList(args.arguments, [ttypes.TSparkParameterValueArg]);
    }
  }
};
TSparkParameter.prototype = {};
TSparkParameter.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ordinal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.TSparkParameterValue();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.arguments = [];
        var _rtmp3157 = input.readListBegin();
        var _size156 = _rtmp3157.size || 0;
        for (var _i158 = 0; _i158 < _size156; ++_i158) {
          var elem159 = null;
          elem159 = new ttypes.TSparkParameterValueArg();
          elem159.read(input);
          this.arguments.push(elem159);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkParameter.prototype.write = function(output) {
  output.writeStructBegin('TSparkParameter');
  if (this.ordinal !== null && this.ordinal !== undefined) {
    output.writeFieldBegin('ordinal', Thrift.Type.I32, 1);
    output.writeI32(this.ordinal);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 4);
    this.value.write(output);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.arguments.length);
    for (var iter160 in this.arguments) {
      if (this.arguments.hasOwnProperty(iter160)) {
        iter160 = this.arguments[iter160];
        iter160.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TStatementConf = module.exports.TStatementConf = function(args) {
  this.sessionless = null;
  this.initialNamespace = null;
  this.client_protocol = null;
  this.client_protocol_i64 = null;
  if (args) {
    if (args.sessionless !== undefined && args.sessionless !== null) {
      this.sessionless = args.sessionless;
    }
    if (args.initialNamespace !== undefined && args.initialNamespace !== null) {
      this.initialNamespace = new ttypes.TNamespace(args.initialNamespace);
    }
    if (args.client_protocol !== undefined && args.client_protocol !== null) {
      this.client_protocol = args.client_protocol;
    }
    if (args.client_protocol_i64 !== undefined && args.client_protocol_i64 !== null) {
      this.client_protocol_i64 = args.client_protocol_i64;
    }
  }
};
TStatementConf.prototype = {};
TStatementConf.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.sessionless = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.initialNamespace = new ttypes.TNamespace();
        this.initialNamespace.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.client_protocol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.client_protocol_i64 = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStatementConf.prototype.write = function(output) {
  output.writeStructBegin('TStatementConf');
  if (this.sessionless !== null && this.sessionless !== undefined) {
    output.writeFieldBegin('sessionless', Thrift.Type.BOOL, 1);
    output.writeBool(this.sessionless);
    output.writeFieldEnd();
  }
  if (this.initialNamespace !== null && this.initialNamespace !== undefined) {
    output.writeFieldBegin('initialNamespace', Thrift.Type.STRUCT, 2);
    this.initialNamespace.write(output);
    output.writeFieldEnd();
  }
  if (this.client_protocol !== null && this.client_protocol !== undefined) {
    output.writeFieldBegin('client_protocol', Thrift.Type.I32, 3);
    output.writeI32(this.client_protocol);
    output.writeFieldEnd();
  }
  if (this.client_protocol_i64 !== null && this.client_protocol_i64 !== undefined) {
    output.writeFieldBegin('client_protocol_i64', Thrift.Type.I64, 4);
    output.writeI64(this.client_protocol_i64);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TExecuteStatementResp = module.exports.TExecuteStatementResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TExecuteStatementResp.prototype = {};
TExecuteStatementResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TExecuteStatementResp.prototype.write = function(output) {
  output.writeStructBegin('TExecuteStatementResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetTypeInfoReq = module.exports.TGetTypeInfoReq = function(args) {
  this.sessionHandle = null;
  this.getDirectResults = null;
  this.runAsync = false;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
  }
};
TGetTypeInfoReq.prototype = {};
TGetTypeInfoReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTypeInfoReq.prototype.write = function(output) {
  output.writeStructBegin('TGetTypeInfoReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetTypeInfoResp = module.exports.TGetTypeInfoResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetTypeInfoResp.prototype = {};
TGetTypeInfoResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTypeInfoResp.prototype.write = function(output) {
  output.writeStructBegin('TGetTypeInfoResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetCatalogsReq = module.exports.TGetCatalogsReq = function(args) {
  this.sessionHandle = null;
  this.getDirectResults = null;
  this.runAsync = false;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
  }
};
TGetCatalogsReq.prototype = {};
TGetCatalogsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetCatalogsReq.prototype.write = function(output) {
  output.writeStructBegin('TGetCatalogsReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetCatalogsResp = module.exports.TGetCatalogsResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetCatalogsResp.prototype = {};
TGetCatalogsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetCatalogsResp.prototype.write = function(output) {
  output.writeStructBegin('TGetCatalogsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetSchemasReq = module.exports.TGetSchemasReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.getDirectResults = null;
  this.runAsync = false;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
  }
};
TGetSchemasReq.prototype = {};
TGetSchemasReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetSchemasReq.prototype.write = function(output) {
  output.writeStructBegin('TGetSchemasReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetSchemasResp = module.exports.TGetSchemasResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetSchemasResp.prototype = {};
TGetSchemasResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetSchemasResp.prototype.write = function(output) {
  output.writeStructBegin('TGetSchemasResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetTablesReq = module.exports.TGetTablesReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.tableName = null;
  this.tableTypes = null;
  this.getDirectResults = null;
  this.runAsync = false;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.tableTypes !== undefined && args.tableTypes !== null) {
      this.tableTypes = Thrift.copyList(args.tableTypes, [null]);
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
  }
};
TGetTablesReq.prototype = {};
TGetTablesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.tableTypes = [];
        var _rtmp3162 = input.readListBegin();
        var _size161 = _rtmp3162.size || 0;
        for (var _i163 = 0; _i163 < _size161; ++_i163) {
          var elem164 = null;
          elem164 = input.readString();
          this.tableTypes.push(elem164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTablesReq.prototype.write = function(output) {
  output.writeStructBegin('TGetTablesReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 4);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableTypes !== null && this.tableTypes !== undefined) {
    output.writeFieldBegin('tableTypes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.tableTypes.length);
    for (var iter165 in this.tableTypes) {
      if (this.tableTypes.hasOwnProperty(iter165)) {
        iter165 = this.tableTypes[iter165];
        output.writeString(iter165);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetTablesResp = module.exports.TGetTablesResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetTablesResp.prototype = {};
TGetTablesResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTablesResp.prototype.write = function(output) {
  output.writeStructBegin('TGetTablesResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetTableTypesReq = module.exports.TGetTableTypesReq = function(args) {
  this.sessionHandle = null;
  this.getDirectResults = null;
  this.runAsync = false;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
  }
};
TGetTableTypesReq.prototype = {};
TGetTableTypesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTableTypesReq.prototype.write = function(output) {
  output.writeStructBegin('TGetTableTypesReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetTableTypesResp = module.exports.TGetTableTypesResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetTableTypesResp.prototype = {};
TGetTableTypesResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTableTypesResp.prototype.write = function(output) {
  output.writeStructBegin('TGetTableTypesResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetColumnsReq = module.exports.TGetColumnsReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.tableName = null;
  this.columnName = null;
  this.getDirectResults = null;
  this.runAsync = false;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.columnName !== undefined && args.columnName !== null) {
      this.columnName = args.columnName;
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
  }
};
TGetColumnsReq.prototype = {};
TGetColumnsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetColumnsReq.prototype.write = function(output) {
  output.writeStructBegin('TGetColumnsReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 4);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 5);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetColumnsResp = module.exports.TGetColumnsResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetColumnsResp.prototype = {};
TGetColumnsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetColumnsResp.prototype.write = function(output) {
  output.writeStructBegin('TGetColumnsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetFunctionsReq = module.exports.TGetFunctionsReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.functionName = null;
  this.getDirectResults = null;
  this.runAsync = false;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
    if (args.functionName !== undefined && args.functionName !== null) {
      this.functionName = args.functionName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field functionName is unset!');
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
  }
};
TGetFunctionsReq.prototype = {};
TGetFunctionsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.functionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetFunctionsReq.prototype.write = function(output) {
  output.writeStructBegin('TGetFunctionsReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.functionName !== null && this.functionName !== undefined) {
    output.writeFieldBegin('functionName', Thrift.Type.STRING, 4);
    output.writeString(this.functionName);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetFunctionsResp = module.exports.TGetFunctionsResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetFunctionsResp.prototype = {};
TGetFunctionsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetFunctionsResp.prototype.write = function(output) {
  output.writeStructBegin('TGetFunctionsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetPrimaryKeysReq = module.exports.TGetPrimaryKeysReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.tableName = null;
  this.getDirectResults = null;
  this.runAsync = false;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
  }
};
TGetPrimaryKeysReq.prototype = {};
TGetPrimaryKeysReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetPrimaryKeysReq.prototype.write = function(output) {
  output.writeStructBegin('TGetPrimaryKeysReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 4);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetPrimaryKeysResp = module.exports.TGetPrimaryKeysResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetPrimaryKeysResp.prototype = {};
TGetPrimaryKeysResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetPrimaryKeysResp.prototype.write = function(output) {
  output.writeStructBegin('TGetPrimaryKeysResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetCrossReferenceReq = module.exports.TGetCrossReferenceReq = function(args) {
  this.sessionHandle = null;
  this.parentCatalogName = null;
  this.parentSchemaName = null;
  this.parentTableName = null;
  this.foreignCatalogName = null;
  this.foreignSchemaName = null;
  this.foreignTableName = null;
  this.getDirectResults = null;
  this.runAsync = false;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.parentCatalogName !== undefined && args.parentCatalogName !== null) {
      this.parentCatalogName = args.parentCatalogName;
    }
    if (args.parentSchemaName !== undefined && args.parentSchemaName !== null) {
      this.parentSchemaName = args.parentSchemaName;
    }
    if (args.parentTableName !== undefined && args.parentTableName !== null) {
      this.parentTableName = args.parentTableName;
    }
    if (args.foreignCatalogName !== undefined && args.foreignCatalogName !== null) {
      this.foreignCatalogName = args.foreignCatalogName;
    }
    if (args.foreignSchemaName !== undefined && args.foreignSchemaName !== null) {
      this.foreignSchemaName = args.foreignSchemaName;
    }
    if (args.foreignTableName !== undefined && args.foreignTableName !== null) {
      this.foreignTableName = args.foreignTableName;
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
  }
};
TGetCrossReferenceReq.prototype = {};
TGetCrossReferenceReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentCatalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.parentSchemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.parentTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.foreignCatalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.foreignSchemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.foreignTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetCrossReferenceReq.prototype.write = function(output) {
  output.writeStructBegin('TGetCrossReferenceReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.parentCatalogName !== null && this.parentCatalogName !== undefined) {
    output.writeFieldBegin('parentCatalogName', Thrift.Type.STRING, 2);
    output.writeString(this.parentCatalogName);
    output.writeFieldEnd();
  }
  if (this.parentSchemaName !== null && this.parentSchemaName !== undefined) {
    output.writeFieldBegin('parentSchemaName', Thrift.Type.STRING, 3);
    output.writeString(this.parentSchemaName);
    output.writeFieldEnd();
  }
  if (this.parentTableName !== null && this.parentTableName !== undefined) {
    output.writeFieldBegin('parentTableName', Thrift.Type.STRING, 4);
    output.writeString(this.parentTableName);
    output.writeFieldEnd();
  }
  if (this.foreignCatalogName !== null && this.foreignCatalogName !== undefined) {
    output.writeFieldBegin('foreignCatalogName', Thrift.Type.STRING, 5);
    output.writeString(this.foreignCatalogName);
    output.writeFieldEnd();
  }
  if (this.foreignSchemaName !== null && this.foreignSchemaName !== undefined) {
    output.writeFieldBegin('foreignSchemaName', Thrift.Type.STRING, 6);
    output.writeString(this.foreignSchemaName);
    output.writeFieldEnd();
  }
  if (this.foreignTableName !== null && this.foreignTableName !== undefined) {
    output.writeFieldBegin('foreignTableName', Thrift.Type.STRING, 7);
    output.writeString(this.foreignTableName);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetCrossReferenceResp = module.exports.TGetCrossReferenceResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetCrossReferenceResp.prototype = {};
TGetCrossReferenceResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetCrossReferenceResp.prototype.write = function(output) {
  output.writeStructBegin('TGetCrossReferenceResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetOperationStatusReq = module.exports.TGetOperationStatusReq = function(args) {
  this.operationHandle = null;
  this.getProgressUpdate = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
    if (args.getProgressUpdate !== undefined && args.getProgressUpdate !== null) {
      this.getProgressUpdate = args.getProgressUpdate;
    }
  }
};
TGetOperationStatusReq.prototype = {};
TGetOperationStatusReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.getProgressUpdate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetOperationStatusReq.prototype.write = function(output) {
  output.writeStructBegin('TGetOperationStatusReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.getProgressUpdate !== null && this.getProgressUpdate !== undefined) {
    output.writeFieldBegin('getProgressUpdate', Thrift.Type.BOOL, 2);
    output.writeBool(this.getProgressUpdate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetOperationStatusResp = module.exports.TGetOperationStatusResp = function(args) {
  this.status = null;
  this.operationState = null;
  this.sqlState = null;
  this.errorCode = null;
  this.errorMessage = null;
  this.taskStatus = null;
  this.operationStarted = null;
  this.operationCompleted = null;
  this.hasResultSet = null;
  this.progressUpdateResponse = null;
  this.numModifiedRows = null;
  this.displayMessage = null;
  this.diagnosticInfo = null;
  this.errorDetailsJson = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationState !== undefined && args.operationState !== null) {
      this.operationState = args.operationState;
    }
    if (args.sqlState !== undefined && args.sqlState !== null) {
      this.sqlState = args.sqlState;
    }
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.errorMessage !== undefined && args.errorMessage !== null) {
      this.errorMessage = args.errorMessage;
    }
    if (args.taskStatus !== undefined && args.taskStatus !== null) {
      this.taskStatus = args.taskStatus;
    }
    if (args.operationStarted !== undefined && args.operationStarted !== null) {
      this.operationStarted = args.operationStarted;
    }
    if (args.operationCompleted !== undefined && args.operationCompleted !== null) {
      this.operationCompleted = args.operationCompleted;
    }
    if (args.hasResultSet !== undefined && args.hasResultSet !== null) {
      this.hasResultSet = args.hasResultSet;
    }
    if (args.progressUpdateResponse !== undefined && args.progressUpdateResponse !== null) {
      this.progressUpdateResponse = new ttypes.TProgressUpdateResp(args.progressUpdateResponse);
    }
    if (args.numModifiedRows !== undefined && args.numModifiedRows !== null) {
      this.numModifiedRows = args.numModifiedRows;
    }
    if (args.displayMessage !== undefined && args.displayMessage !== null) {
      this.displayMessage = args.displayMessage;
    }
    if (args.diagnosticInfo !== undefined && args.diagnosticInfo !== null) {
      this.diagnosticInfo = args.diagnosticInfo;
    }
    if (args.errorDetailsJson !== undefined && args.errorDetailsJson !== null) {
      this.errorDetailsJson = args.errorDetailsJson;
    }
  }
};
TGetOperationStatusResp.prototype = {};
TGetOperationStatusResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operationState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sqlState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.taskStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.operationStarted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.operationCompleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.hasResultSet = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.progressUpdateResponse = new ttypes.TProgressUpdateResp();
        this.progressUpdateResponse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.numModifiedRows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRING) {
        this.displayMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.STRING) {
        this.diagnosticInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1283:
      if (ftype == Thrift.Type.STRING) {
        this.errorDetailsJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetOperationStatusResp.prototype.write = function(output) {
  output.writeStructBegin('TGetOperationStatusResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationState !== null && this.operationState !== undefined) {
    output.writeFieldBegin('operationState', Thrift.Type.I32, 2);
    output.writeI32(this.operationState);
    output.writeFieldEnd();
  }
  if (this.sqlState !== null && this.sqlState !== undefined) {
    output.writeFieldBegin('sqlState', Thrift.Type.STRING, 3);
    output.writeString(this.sqlState);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 4);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 5);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  if (this.taskStatus !== null && this.taskStatus !== undefined) {
    output.writeFieldBegin('taskStatus', Thrift.Type.STRING, 6);
    output.writeString(this.taskStatus);
    output.writeFieldEnd();
  }
  if (this.operationStarted !== null && this.operationStarted !== undefined) {
    output.writeFieldBegin('operationStarted', Thrift.Type.I64, 7);
    output.writeI64(this.operationStarted);
    output.writeFieldEnd();
  }
  if (this.operationCompleted !== null && this.operationCompleted !== undefined) {
    output.writeFieldBegin('operationCompleted', Thrift.Type.I64, 8);
    output.writeI64(this.operationCompleted);
    output.writeFieldEnd();
  }
  if (this.hasResultSet !== null && this.hasResultSet !== undefined) {
    output.writeFieldBegin('hasResultSet', Thrift.Type.BOOL, 9);
    output.writeBool(this.hasResultSet);
    output.writeFieldEnd();
  }
  if (this.progressUpdateResponse !== null && this.progressUpdateResponse !== undefined) {
    output.writeFieldBegin('progressUpdateResponse', Thrift.Type.STRUCT, 10);
    this.progressUpdateResponse.write(output);
    output.writeFieldEnd();
  }
  if (this.numModifiedRows !== null && this.numModifiedRows !== undefined) {
    output.writeFieldBegin('numModifiedRows', Thrift.Type.I64, 11);
    output.writeI64(this.numModifiedRows);
    output.writeFieldEnd();
  }
  if (this.displayMessage !== null && this.displayMessage !== undefined) {
    output.writeFieldBegin('displayMessage', Thrift.Type.STRING, 1281);
    output.writeString(this.displayMessage);
    output.writeFieldEnd();
  }
  if (this.diagnosticInfo !== null && this.diagnosticInfo !== undefined) {
    output.writeFieldBegin('diagnosticInfo', Thrift.Type.STRING, 1282);
    output.writeString(this.diagnosticInfo);
    output.writeFieldEnd();
  }
  if (this.errorDetailsJson !== null && this.errorDetailsJson !== undefined) {
    output.writeFieldBegin('errorDetailsJson', Thrift.Type.STRING, 1283);
    output.writeString(this.errorDetailsJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCancelOperationReq = module.exports.TCancelOperationReq = function(args) {
  this.operationHandle = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
  }
};
TCancelOperationReq.prototype = {};
TCancelOperationReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCancelOperationReq.prototype.write = function(output) {
  output.writeStructBegin('TCancelOperationReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCancelOperationResp = module.exports.TCancelOperationResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCancelOperationResp.prototype = {};
TCancelOperationResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCancelOperationResp.prototype.write = function(output) {
  output.writeStructBegin('TCancelOperationResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCloseOperationReq = module.exports.TCloseOperationReq = function(args) {
  this.operationHandle = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
  }
};
TCloseOperationReq.prototype = {};
TCloseOperationReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseOperationReq.prototype.write = function(output) {
  output.writeStructBegin('TCloseOperationReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCloseOperationResp = module.exports.TCloseOperationResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCloseOperationResp.prototype = {};
TCloseOperationResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseOperationResp.prototype.write = function(output) {
  output.writeStructBegin('TCloseOperationResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetResultSetMetadataReq = module.exports.TGetResultSetMetadataReq = function(args) {
  this.operationHandle = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
  }
};
TGetResultSetMetadataReq.prototype = {};
TGetResultSetMetadataReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetResultSetMetadataReq.prototype.write = function(output) {
  output.writeStructBegin('TGetResultSetMetadataReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetResultSetMetadataResp = module.exports.TGetResultSetMetadataResp = function(args) {
  this.status = null;
  this.schema = null;
  this.resultFormat = null;
  this.lz4Compressed = null;
  this.arrowSchema = null;
  this.cacheLookupResult = null;
  this.uncompressedBytes = null;
  this.compressedBytes = null;
  this.isStagingOperation = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = new ttypes.TTableSchema(args.schema);
    }
    if (args.resultFormat !== undefined && args.resultFormat !== null) {
      this.resultFormat = args.resultFormat;
    }
    if (args.lz4Compressed !== undefined && args.lz4Compressed !== null) {
      this.lz4Compressed = args.lz4Compressed;
    }
    if (args.arrowSchema !== undefined && args.arrowSchema !== null) {
      this.arrowSchema = args.arrowSchema;
    }
    if (args.cacheLookupResult !== undefined && args.cacheLookupResult !== null) {
      this.cacheLookupResult = args.cacheLookupResult;
    }
    if (args.uncompressedBytes !== undefined && args.uncompressedBytes !== null) {
      this.uncompressedBytes = args.uncompressedBytes;
    }
    if (args.compressedBytes !== undefined && args.compressedBytes !== null) {
      this.compressedBytes = args.compressedBytes;
    }
    if (args.isStagingOperation !== undefined && args.isStagingOperation !== null) {
      this.isStagingOperation = args.isStagingOperation;
    }
  }
};
TGetResultSetMetadataResp.prototype = {};
TGetResultSetMetadataResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.TTableSchema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.I32) {
        this.resultFormat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.lz4Compressed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1283:
      if (ftype == Thrift.Type.STRING) {
        this.arrowSchema = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1284:
      if (ftype == Thrift.Type.I32) {
        this.cacheLookupResult = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1285:
      if (ftype == Thrift.Type.I64) {
        this.uncompressedBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1286:
      if (ftype == Thrift.Type.I64) {
        this.compressedBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1287:
      if (ftype == Thrift.Type.BOOL) {
        this.isStagingOperation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetResultSetMetadataResp.prototype.write = function(output) {
  output.writeStructBegin('TGetResultSetMetadataResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 2);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  if (this.resultFormat !== null && this.resultFormat !== undefined) {
    output.writeFieldBegin('resultFormat', Thrift.Type.I32, 1281);
    output.writeI32(this.resultFormat);
    output.writeFieldEnd();
  }
  if (this.lz4Compressed !== null && this.lz4Compressed !== undefined) {
    output.writeFieldBegin('lz4Compressed', Thrift.Type.BOOL, 1282);
    output.writeBool(this.lz4Compressed);
    output.writeFieldEnd();
  }
  if (this.arrowSchema !== null && this.arrowSchema !== undefined) {
    output.writeFieldBegin('arrowSchema', Thrift.Type.STRING, 1283);
    output.writeBinary(this.arrowSchema);
    output.writeFieldEnd();
  }
  if (this.cacheLookupResult !== null && this.cacheLookupResult !== undefined) {
    output.writeFieldBegin('cacheLookupResult', Thrift.Type.I32, 1284);
    output.writeI32(this.cacheLookupResult);
    output.writeFieldEnd();
  }
  if (this.uncompressedBytes !== null && this.uncompressedBytes !== undefined) {
    output.writeFieldBegin('uncompressedBytes', Thrift.Type.I64, 1285);
    output.writeI64(this.uncompressedBytes);
    output.writeFieldEnd();
  }
  if (this.compressedBytes !== null && this.compressedBytes !== undefined) {
    output.writeFieldBegin('compressedBytes', Thrift.Type.I64, 1286);
    output.writeI64(this.compressedBytes);
    output.writeFieldEnd();
  }
  if (this.isStagingOperation !== null && this.isStagingOperation !== undefined) {
    output.writeFieldBegin('isStagingOperation', Thrift.Type.BOOL, 1287);
    output.writeBool(this.isStagingOperation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFetchResultsReq = module.exports.TFetchResultsReq = function(args) {
  this.operationHandle = null;
  this.orientation = 0;
  this.maxRows = null;
  this.fetchType = 0;
  this.maxBytes = null;
  this.startRowOffset = null;
  this.includeResultSetMetadata = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
    if (args.orientation !== undefined && args.orientation !== null) {
      this.orientation = args.orientation;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field orientation is unset!');
    }
    if (args.maxRows !== undefined && args.maxRows !== null) {
      this.maxRows = args.maxRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxRows is unset!');
    }
    if (args.fetchType !== undefined && args.fetchType !== null) {
      this.fetchType = args.fetchType;
    }
    if (args.maxBytes !== undefined && args.maxBytes !== null) {
      this.maxBytes = args.maxBytes;
    }
    if (args.startRowOffset !== undefined && args.startRowOffset !== null) {
      this.startRowOffset = args.startRowOffset;
    }
    if (args.includeResultSetMetadata !== undefined && args.includeResultSetMetadata !== null) {
      this.includeResultSetMetadata = args.includeResultSetMetadata;
    }
  }
};
TFetchResultsReq.prototype = {};
TFetchResultsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.orientation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.maxRows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.fetchType = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.I64) {
        this.maxBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.I64) {
        this.startRowOffset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1283:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResultSetMetadata = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFetchResultsReq.prototype.write = function(output) {
  output.writeStructBegin('TFetchResultsReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.orientation !== null && this.orientation !== undefined) {
    output.writeFieldBegin('orientation', Thrift.Type.I32, 2);
    output.writeI32(this.orientation);
    output.writeFieldEnd();
  }
  if (this.maxRows !== null && this.maxRows !== undefined) {
    output.writeFieldBegin('maxRows', Thrift.Type.I64, 3);
    output.writeI64(this.maxRows);
    output.writeFieldEnd();
  }
  if (this.fetchType !== null && this.fetchType !== undefined) {
    output.writeFieldBegin('fetchType', Thrift.Type.I16, 4);
    output.writeI16(this.fetchType);
    output.writeFieldEnd();
  }
  if (this.maxBytes !== null && this.maxBytes !== undefined) {
    output.writeFieldBegin('maxBytes', Thrift.Type.I64, 1281);
    output.writeI64(this.maxBytes);
    output.writeFieldEnd();
  }
  if (this.startRowOffset !== null && this.startRowOffset !== undefined) {
    output.writeFieldBegin('startRowOffset', Thrift.Type.I64, 1282);
    output.writeI64(this.startRowOffset);
    output.writeFieldEnd();
  }
  if (this.includeResultSetMetadata !== null && this.includeResultSetMetadata !== undefined) {
    output.writeFieldBegin('includeResultSetMetadata', Thrift.Type.BOOL, 1283);
    output.writeBool(this.includeResultSetMetadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFetchResultsResp = module.exports.TFetchResultsResp = function(args) {
  this.status = null;
  this.hasMoreRows = null;
  this.results = null;
  this.resultSetMetadata = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.hasMoreRows !== undefined && args.hasMoreRows !== null) {
      this.hasMoreRows = args.hasMoreRows;
    }
    if (args.results !== undefined && args.results !== null) {
      this.results = new ttypes.TRowSet(args.results);
    }
    if (args.resultSetMetadata !== undefined && args.resultSetMetadata !== null) {
      this.resultSetMetadata = new ttypes.TGetResultSetMetadataResp(args.resultSetMetadata);
    }
  }
};
TFetchResultsResp.prototype = {};
TFetchResultsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasMoreRows = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.results = new ttypes.TRowSet();
        this.results.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetMetadata = new ttypes.TGetResultSetMetadataResp();
        this.resultSetMetadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFetchResultsResp.prototype.write = function(output) {
  output.writeStructBegin('TFetchResultsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.hasMoreRows !== null && this.hasMoreRows !== undefined) {
    output.writeFieldBegin('hasMoreRows', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasMoreRows);
    output.writeFieldEnd();
  }
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.STRUCT, 3);
    this.results.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetMetadata !== null && this.resultSetMetadata !== undefined) {
    output.writeFieldBegin('resultSetMetadata', Thrift.Type.STRUCT, 1281);
    this.resultSetMetadata.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetDelegationTokenReq = module.exports.TGetDelegationTokenReq = function(args) {
  this.sessionHandle = null;
  this.owner = null;
  this.renewer = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.owner !== undefined && args.owner !== null) {
      this.owner = args.owner;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field owner is unset!');
    }
    if (args.renewer !== undefined && args.renewer !== null) {
      this.renewer = args.renewer;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field renewer is unset!');
    }
  }
};
TGetDelegationTokenReq.prototype = {};
TGetDelegationTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.renewer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetDelegationTokenReq.prototype.write = function(output) {
  output.writeStructBegin('TGetDelegationTokenReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 2);
    output.writeString(this.owner);
    output.writeFieldEnd();
  }
  if (this.renewer !== null && this.renewer !== undefined) {
    output.writeFieldBegin('renewer', Thrift.Type.STRING, 3);
    output.writeString(this.renewer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGetDelegationTokenResp = module.exports.TGetDelegationTokenResp = function(args) {
  this.status = null;
  this.delegationToken = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.delegationToken !== undefined && args.delegationToken !== null) {
      this.delegationToken = args.delegationToken;
    }
  }
};
TGetDelegationTokenResp.prototype = {};
TGetDelegationTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.delegationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetDelegationTokenResp.prototype.write = function(output) {
  output.writeStructBegin('TGetDelegationTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.delegationToken !== null && this.delegationToken !== undefined) {
    output.writeFieldBegin('delegationToken', Thrift.Type.STRING, 2);
    output.writeString(this.delegationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCancelDelegationTokenReq = module.exports.TCancelDelegationTokenReq = function(args) {
  this.sessionHandle = null;
  this.delegationToken = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.delegationToken !== undefined && args.delegationToken !== null) {
      this.delegationToken = args.delegationToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field delegationToken is unset!');
    }
  }
};
TCancelDelegationTokenReq.prototype = {};
TCancelDelegationTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.delegationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCancelDelegationTokenReq.prototype.write = function(output) {
  output.writeStructBegin('TCancelDelegationTokenReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.delegationToken !== null && this.delegationToken !== undefined) {
    output.writeFieldBegin('delegationToken', Thrift.Type.STRING, 2);
    output.writeString(this.delegationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCancelDelegationTokenResp = module.exports.TCancelDelegationTokenResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCancelDelegationTokenResp.prototype = {};
TCancelDelegationTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCancelDelegationTokenResp.prototype.write = function(output) {
  output.writeStructBegin('TCancelDelegationTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TRenewDelegationTokenReq = module.exports.TRenewDelegationTokenReq = function(args) {
  this.sessionHandle = null;
  this.delegationToken = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.delegationToken !== undefined && args.delegationToken !== null) {
      this.delegationToken = args.delegationToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field delegationToken is unset!');
    }
  }
};
TRenewDelegationTokenReq.prototype = {};
TRenewDelegationTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.delegationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRenewDelegationTokenReq.prototype.write = function(output) {
  output.writeStructBegin('TRenewDelegationTokenReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.delegationToken !== null && this.delegationToken !== undefined) {
    output.writeFieldBegin('delegationToken', Thrift.Type.STRING, 2);
    output.writeString(this.delegationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TRenewDelegationTokenResp = module.exports.TRenewDelegationTokenResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TRenewDelegationTokenResp.prototype = {};
TRenewDelegationTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRenewDelegationTokenResp.prototype.write = function(output) {
  output.writeStructBegin('TRenewDelegationTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TProgressUpdateResp = module.exports.TProgressUpdateResp = function(args) {
  this.headerNames = null;
  this.rows = null;
  this.progressedPercentage = null;
  this.status = null;
  this.footerSummary = null;
  this.startTime = null;
  if (args) {
    if (args.headerNames !== undefined && args.headerNames !== null) {
      this.headerNames = Thrift.copyList(args.headerNames, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field headerNames is unset!');
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rows is unset!');
    }
    if (args.progressedPercentage !== undefined && args.progressedPercentage !== null) {
      this.progressedPercentage = args.progressedPercentage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field progressedPercentage is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.footerSummary !== undefined && args.footerSummary !== null) {
      this.footerSummary = args.footerSummary;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field footerSummary is unset!');
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startTime is unset!');
    }
  }
};
TProgressUpdateResp.prototype = {};
TProgressUpdateResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.headerNames = [];
        var _rtmp3167 = input.readListBegin();
        var _size166 = _rtmp3167.size || 0;
        for (var _i168 = 0; _i168 < _size166; ++_i168) {
          var elem169 = null;
          elem169 = input.readString();
          this.headerNames.push(elem169);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.rows = [];
        var _rtmp3171 = input.readListBegin();
        var _size170 = _rtmp3171.size || 0;
        for (var _i172 = 0; _i172 < _size170; ++_i172) {
          var elem173 = null;
          elem173 = [];
          var _rtmp3175 = input.readListBegin();
          var _size174 = _rtmp3175.size || 0;
          for (var _i176 = 0; _i176 < _size174; ++_i176) {
            var elem177 = null;
            elem177 = input.readString();
            elem173.push(elem177);
          }
          input.readListEnd();
          this.rows.push(elem173);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.progressedPercentage = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.footerSummary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TProgressUpdateResp.prototype.write = function(output) {
  output.writeStructBegin('TProgressUpdateResp');
  if (this.headerNames !== null && this.headerNames !== undefined) {
    output.writeFieldBegin('headerNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.headerNames.length);
    for (var iter178 in this.headerNames) {
      if (this.headerNames.hasOwnProperty(iter178)) {
        iter178 = this.headerNames[iter178];
        output.writeString(iter178);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.rows.length);
    for (var iter179 in this.rows) {
      if (this.rows.hasOwnProperty(iter179)) {
        iter179 = this.rows[iter179];
        output.writeListBegin(Thrift.Type.STRING, iter179.length);
        for (var iter180 in iter179) {
          if (iter179.hasOwnProperty(iter180)) {
            iter180 = iter179[iter180];
            output.writeString(iter180);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.progressedPercentage !== null && this.progressedPercentage !== undefined) {
    output.writeFieldBegin('progressedPercentage', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.progressedPercentage);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.footerSummary !== null && this.footerSummary !== undefined) {
    output.writeFieldBegin('footerSummary', Thrift.Type.STRING, 5);
    output.writeString(this.footerSummary);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 6);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.PRIMITIVE_TYPES = [0,1,2,3,4,5,6,7,8,9,15,16,17,18,19,20,21];
ttypes.COMPLEX_TYPES = [10,11,12,13,14];
ttypes.COLLECTION_TYPES = [10,11];
ttypes.TYPE_NAMES = {
  10 : 'ARRAY',
  4 : 'BIGINT',
  9 : 'BINARY',
  0 : 'BOOLEAN',
  19 : 'CHAR',
  17 : 'DATE',
  15 : 'DECIMAL',
  6 : 'DOUBLE',
  5 : 'FLOAT',
  21 : 'INTERVAL_DAY_TIME',
  20 : 'INTERVAL_YEAR_MONTH',
  3 : 'INT',
  11 : 'MAP',
  16 : 'NULL',
  2 : 'SMALLINT',
  7 : 'STRING',
  12 : 'STRUCT',
  8 : 'TIMESTAMP',
  1 : 'TINYINT',
  13 : 'UNIONTYPE',
  18 : 'VARCHAR'
};
ttypes.CHARACTER_MAXIMUM_LENGTH = 'characterMaximumLength';
ttypes.PRECISION = 'precision';
ttypes.SCALE = 'scale';
